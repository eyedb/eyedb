
/*
 * EyeDB Version 2.8.8 Copyright (c) 1995-2006 SYSRA
 *
 * File 'utilsstubsfe.cc'
 *
 * Package Name 'utils'
 *
 * Generated by eyedbodl at Thu Sep 10 15:17:13 2009
 *
 * ---------------------------------------------------
 * -------------- DO NOT EDIT THIS CODE --------------
 * ---------------------------------------------------
 *
 */

#include <eyedb/eyedb.h>

#include <eyedb/utils.h>

using namespace eyedb;

extern eyedb::Status __method_static_OUT_date_REF__date_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, Date * &retarg);

extern "C" eyedb::Status
method_static_OUT_date_REF__date_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Date * _retarg = 0;

  status = __method_static_OUT_date_REF__date_date(_db, _m, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_date_REF__date_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, Date * d, Date * &retarg);

extern "C" eyedb::Status
method_static_OUT_date_REF__date_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Date * d = (Date *)_array[0]->getObject();
  Date * _retarg = 0;

  status = __method_static_OUT_date_REF__date_date__IN_date_REF_(_db, _m, d, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_date_REF__date_date__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int32 julian_day, Date * &retarg);

extern "C" eyedb::Status
method_static_OUT_date_REF__date_date__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 julian_day = *_array[0]->getInteger32();
  Date * _retarg = 0;

  status = __method_static_OUT_date_REF__date_date__IN_int32(_db, _m, julian_day, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_date_REF__date_date__IN_int32__IN_month__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int32 year, const Month::Type m, const eyedblib::int16 day, Date * &retarg);

extern "C" eyedb::Status
method_static_OUT_date_REF__date_date__IN_int32__IN_month__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 year = *_array[0]->getInteger32();
  const Month::Type m = (Month::Type)*_array[1]->getInteger32();
  const eyedblib::int16 day = *_array[2]->getInteger16();
  Date * _retarg = 0;

  status = __method_static_OUT_date_REF__date_date__IN_int32__IN_month__IN_int16(_db, _m, year, m, day, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_date_REF__date_date__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * d, Date * &retarg);

extern "C" eyedb::Status
method_static_OUT_date_REF__date_date__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * d = _array[0]->getString();
  Date * _retarg = 0;

  status = __method_static_OUT_date_REF__date_date__IN_string(_db, _m, d, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_int32_julian_date__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * d, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method_static_OUT_int32_julian_date__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * d = _array[0]->getString();
  eyedblib::int32 _retarg = 0;

  status = __method_static_OUT_int32_julian_date__IN_string(_db, _m, d, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int32_year_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method__OUT_int32_year_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_year_date(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_month_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_month_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_month_date(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_day_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_day_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_day_date(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_day_of_year_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_day_of_year_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_day_of_year_date(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_month_month_of_year_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Month::Type &retarg);

extern "C" eyedb::Status
method__OUT_month_month_of_year_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Month::Type _retarg = (Month::Type)0;

  status = __method__OUT_month_month_of_year_date(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_weekday_day_of_week_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Weekday::Type &retarg);

extern "C" eyedb::Status
method__OUT_weekday_day_of_week_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Weekday::Type _retarg = (Weekday::Type)0;

  status = __method__OUT_weekday_day_of_week_date(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_string_toString_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, char * &retarg);

extern "C" eyedb::Status
method__OUT_string_toString_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  char * _retarg = 0;

  status = __method__OUT_string_toString_date(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_leap_year_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_leap_year_date(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_leap_year_date(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_equal_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Date * d, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_equal_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Date * d = (Date *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_equal_date__IN_date_REF_(_db, _m, _o, d, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_greater_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Date * d, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_greater_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Date * d = (Date *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_greater_date__IN_date_REF_(_db, _m, _o, d, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_greater_or_equal_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Date * d, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_greater_or_equal_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Date * d = (Date *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_greater_or_equal_date__IN_date_REF_(_db, _m, _o, d, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_less_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Date * d, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_less_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Date * d = (Date *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_less_date__IN_date_REF_(_db, _m, _o, d, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_less_or_equal_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Date * d, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_less_or_equal_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Date * d = (Date *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_less_or_equal_date__IN_date_REF_(_db, _m, _o, d, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_between_date__IN_date_REF___IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Date * d1, Date * d2, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_between_date__IN_date_REF___IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Date * d1 = (Date *)_array[0]->getObject();
  Date * d2 = (Date *)_array[1]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_between_date__IN_date_REF___IN_date_REF_(_db, _m, _o, d1, d2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_date_REF__next_date__IN_weekday(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const Weekday::Type day, Date * &retarg);

extern "C" eyedb::Status
method__OUT_date_REF__next_date__IN_weekday(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const Weekday::Type day = (Weekday::Type)*_array[0]->getInteger32();
  Date * _retarg = 0;

  status = __method__OUT_date_REF__next_date__IN_weekday(_db, _m, _o, day, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_date_REF__previous_date__IN_weekday(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const Weekday::Type day, Date * &retarg);

extern "C" eyedb::Status
method__OUT_date_REF__previous_date__IN_weekday(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const Weekday::Type day = (Weekday::Type)*_array[0]->getInteger32();
  Date * _retarg = 0;

  status = __method__OUT_date_REF__previous_date__IN_weekday(_db, _m, _o, day, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_date_REF__add_days_date__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int32 days, Date * &retarg);

extern "C" eyedb::Status
method__OUT_date_REF__add_days_date__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 days = *_array[0]->getInteger32();
  Date * _retarg = 0;

  status = __method__OUT_date_REF__add_days_date__IN_int32(_db, _m, _o, days, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_date_REF__substract_days_date__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int32 days, Date * &retarg);

extern "C" eyedb::Status
method__OUT_date_REF__substract_days_date__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 days = *_array[0]->getInteger32();
  Date * _retarg = 0;

  status = __method__OUT_date_REF__substract_days_date__IN_int32(_db, _m, _o, days, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int32_substract_date_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Date * d, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method__OUT_int32_substract_date_date__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Date * d = (Date *)_array[0]->getObject();
  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_substract_date_date__IN_date_REF_(_db, _m, _o, d, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_void_set_julian_date__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int32 julian_day);

extern "C" eyedb::Status
method__OUT_void_set_julian_date__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 julian_day = *_array[0]->getInteger32();

  status = __method__OUT_void_set_julian_date__IN_int32(_db, _m, _o, julian_day);
  if (status) return status;

  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_void_get_local_time_zone_time__OUT_int16__OUT_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedblib::int16 &tz_hour, eyedblib::int16 &tz_min);

extern "C" eyedb::Status
method_static_OUT_void_get_local_time_zone_time__OUT_int16__OUT_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 tz_hour = 0;
  eyedblib::int16 tz_min = 0;

  status = __method_static_OUT_void_get_local_time_zone_time__OUT_int16__OUT_int16(_db, _m, tz_hour, tz_min);
  if (status) return status;

  _array[0]->set(tz_hour);
  _array[1]->set(tz_min);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_REF__gmt_time_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, Time * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_REF__gmt_time_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Time * _retarg = 0;

  status = __method_static_OUT_time_REF__gmt_time_time(_db, _m, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_REF__local_time_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, Time * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_REF__local_time_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Time * _retarg = 0;

  status = __method_static_OUT_time_REF__local_time_time(_db, _m, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_REF__time_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, Time * t, Time * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_REF__time_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Time * t = (Time *)_array[0]->getObject();
  Time * _retarg = 0;

  status = __method_static_OUT_time_REF__time_time__IN_time_REF_(_db, _m, t, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_REF__time_time__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int64 usec, Time * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_REF__time_time__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int64 usec = *_array[0]->getInteger64();
  Time * _retarg = 0;

  status = __method_static_OUT_time_REF__time_time__IN_int64(_db, _m, usec, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_REF__time_time__IN_int64__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int64 usec, const eyedblib::int16 tz, Time * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_REF__time_time__IN_int64__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int64 usec = *_array[0]->getInteger64();
  const eyedblib::int16 tz = *_array[1]->getInteger16();
  Time * _retarg = 0;

  status = __method_static_OUT_time_REF__time_time__IN_int64__IN_int16(_db, _m, usec, tz, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_REF__time_time__IN_int16__IN_int16__IN_int16__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int16 hours, const eyedblib::int16 min, const eyedblib::int16 sec, const eyedblib::int16 msec, Time * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_REF__time_time__IN_int16__IN_int16__IN_int16__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int16 hours = *_array[0]->getInteger16();
  const eyedblib::int16 min = *_array[1]->getInteger16();
  const eyedblib::int16 sec = *_array[2]->getInteger16();
  const eyedblib::int16 msec = *_array[3]->getInteger16();
  Time * _retarg = 0;

  status = __method_static_OUT_time_REF__time_time__IN_int16__IN_int16__IN_int16__IN_int16(_db, _m, hours, min, sec, msec, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_REF__time_time__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int16 hours, const eyedblib::int16 min, const eyedblib::int16 sec, const eyedblib::int16 msec, const eyedblib::int16 usec, Time * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_REF__time_time__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int16 hours = *_array[0]->getInteger16();
  const eyedblib::int16 min = *_array[1]->getInteger16();
  const eyedblib::int16 sec = *_array[2]->getInteger16();
  const eyedblib::int16 msec = *_array[3]->getInteger16();
  const eyedblib::int16 usec = *_array[4]->getInteger16();
  Time * _retarg = 0;

  status = __method_static_OUT_time_REF__time_time__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16(_db, _m, hours, min, sec, msec, usec, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_REF__time_time__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int16 hours, const eyedblib::int16 min, const eyedblib::int16 sec, const eyedblib::int16 msec, const eyedblib::int16 tz_hour, const eyedblib::int16 tz_minute, Time * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_REF__time_time__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int16 hours = *_array[0]->getInteger16();
  const eyedblib::int16 min = *_array[1]->getInteger16();
  const eyedblib::int16 sec = *_array[2]->getInteger16();
  const eyedblib::int16 msec = *_array[3]->getInteger16();
  const eyedblib::int16 tz_hour = *_array[4]->getInteger16();
  const eyedblib::int16 tz_minute = *_array[5]->getInteger16();
  Time * _retarg = 0;

  status = __method_static_OUT_time_REF__time_time__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16(_db, _m, hours, min, sec, msec, tz_hour, tz_minute, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_REF__time_time__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int16 hours, const eyedblib::int16 min, const eyedblib::int16 sec, const eyedblib::int16 msec, const eyedblib::int16 usec, const eyedblib::int16 tz_hour, const eyedblib::int16 tz_minute, Time * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_REF__time_time__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int16 hours = *_array[0]->getInteger16();
  const eyedblib::int16 min = *_array[1]->getInteger16();
  const eyedblib::int16 sec = *_array[2]->getInteger16();
  const eyedblib::int16 msec = *_array[3]->getInteger16();
  const eyedblib::int16 usec = *_array[4]->getInteger16();
  const eyedblib::int16 tz_hour = *_array[5]->getInteger16();
  const eyedblib::int16 tz_minute = *_array[6]->getInteger16();
  Time * _retarg = 0;

  status = __method_static_OUT_time_REF__time_time__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16(_db, _m, hours, min, sec, msec, usec, tz_hour, tz_minute, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_REF__time_time__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * t, Time * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_REF__time_time__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * t = _array[0]->getString();
  Time * _retarg = 0;

  status = __method_static_OUT_time_REF__time_time__IN_string(_db, _m, t, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_int64_usec_time_time__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * t, eyedblib::int64 &retarg);

extern "C" eyedb::Status
method_static_OUT_int64_usec_time_time__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * t = _array[0]->getString();
  eyedblib::int64 _retarg = 0;

  status = __method_static_OUT_int64_usec_time_time__IN_string(_db, _m, t, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_hour_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_hour_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_hour_time(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_minute_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_minute_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_minute_time(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_second_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_second_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_second_time(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_millisecond_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_millisecond_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_millisecond_time(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_tz_hour_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_tz_hour_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_tz_hour_time(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_tz_minute_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_tz_minute_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_tz_minute_time(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_string_toString_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, char * &retarg);

extern "C" eyedb::Status
method__OUT_string_toString_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  char * _retarg = 0;

  status = __method__OUT_string_toString_time(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_equal_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Time * t, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_equal_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Time * t = (Time *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_equal_time__IN_time_REF_(_db, _m, _o, t, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_greater_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Time * t, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_greater_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Time * t = (Time *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_greater_time__IN_time_REF_(_db, _m, _o, t, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_greater_or_equal_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Time * t, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_greater_or_equal_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Time * t = (Time *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_greater_or_equal_time__IN_time_REF_(_db, _m, _o, t, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_less_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Time * t, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_less_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Time * t = (Time *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_less_time__IN_time_REF_(_db, _m, _o, t, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_less_or_equal_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Time * t, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_less_or_equal_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Time * t = (Time *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_less_or_equal_time__IN_time_REF_(_db, _m, _o, t, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_between_time__IN_time_REF___IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Time * t1, Time * t2, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_between_time__IN_time_REF___IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Time * t1 = (Time *)_array[0]->getObject();
  Time * t2 = (Time *)_array[1]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_between_time__IN_time_REF___IN_time_REF_(_db, _m, _o, t1, t2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_time_REF__add_interval_time__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeInterval * i, Time * &retarg);

extern "C" eyedb::Status
method__OUT_time_REF__add_interval_time__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeInterval * i = (TimeInterval *)_array[0]->getObject();
  Time * _retarg = 0;

  status = __method__OUT_time_REF__add_interval_time__IN_time_interval_REF_(_db, _m, _o, i, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_time_REF__substract_interval_time__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeInterval * i, Time * &retarg);

extern "C" eyedb::Status
method__OUT_time_REF__substract_interval_time__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeInterval * i = (TimeInterval *)_array[0]->getObject();
  Time * _retarg = 0;

  status = __method__OUT_time_REF__substract_interval_time__IN_time_interval_REF_(_db, _m, _o, i, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_time_interval_REF__substract_time_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Time * t, TimeInterval * &retarg);

extern "C" eyedb::Status
method__OUT_time_interval_REF__substract_time_time__IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Time * t = (Time *)_array[0]->getObject();
  TimeInterval * _retarg = 0;

  status = __method__OUT_time_interval_REF__substract_time_time__IN_time_REF_(_db, _m, _o, t, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_gmt_hour_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_gmt_hour_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_gmt_hour_time(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_gmt_minute_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_gmt_minute_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_gmt_minute_time(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_microsecond_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_microsecond_time(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_microsecond_time(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_void_set_usecs_time__IN_int64__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int64 usecs, const eyedblib::int16 tz);

extern "C" eyedb::Status
method__OUT_void_set_usecs_time__IN_int64__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int64 usecs = *_array[0]->getInteger64();
  const eyedblib::int16 tz = *_array[1]->getInteger16();

  status = __method__OUT_void_set_usecs_time__IN_int64__IN_int16(_db, _m, _o, usecs, tz);
  if (status) return status;

  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_stamp_REF__gmt_time_stamp_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, TimeStamp * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_stamp_REF__gmt_time_stamp_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeStamp * _retarg = 0;

  status = __method_static_OUT_time_stamp_REF__gmt_time_stamp_time_stamp(_db, _m, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_stamp_REF__local_time_stamp_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, TimeStamp * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_stamp_REF__local_time_stamp_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeStamp * _retarg = 0;

  status = __method_static_OUT_time_stamp_REF__local_time_stamp_time_stamp(_db, _m, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, TimeStamp * ts, TimeStamp * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeStamp * ts = (TimeStamp *)_array[0]->getObject();
  TimeStamp * _retarg = 0;

  status = __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_time_stamp_REF_(_db, _m, ts, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int64 usec, TimeStamp * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int64 usec = *_array[0]->getInteger64();
  TimeStamp * _retarg = 0;

  status = __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_int64(_db, _m, usec, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_int64__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int64 usec, const eyedblib::int16 tz, TimeStamp * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_int64__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int64 usec = *_array[0]->getInteger64();
  const eyedblib::int16 tz = *_array[1]->getInteger16();
  TimeStamp * _retarg = 0;

  status = __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_int64__IN_int16(_db, _m, usec, tz, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_int32__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int32 julian_day, const eyedblib::int64 usec, TimeStamp * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_int32__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 julian_day = *_array[0]->getInteger32();
  const eyedblib::int64 usec = *_array[1]->getInteger64();
  TimeStamp * _retarg = 0;

  status = __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_int32__IN_int64(_db, _m, julian_day, usec, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_int32__IN_int64__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int32 julian_day, const eyedblib::int64 usec, const eyedblib::int16 tz, TimeStamp * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_int32__IN_int64__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 julian_day = *_array[0]->getInteger32();
  const eyedblib::int64 usec = *_array[1]->getInteger64();
  const eyedblib::int16 tz = *_array[2]->getInteger16();
  TimeStamp * _retarg = 0;

  status = __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_int32__IN_int64__IN_int16(_db, _m, julian_day, usec, tz, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_date_REF___IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, Date * d, Time * t, TimeStamp * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_date_REF___IN_time_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Date * d = (Date *)_array[0]->getObject();
  Time * t = (Time *)_array[1]->getObject();
  TimeStamp * _retarg = 0;

  status = __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_date_REF___IN_time_REF_(_db, _m, d, t, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, Date * d, TimeStamp * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_date_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Date * d = (Date *)_array[0]->getObject();
  TimeStamp * _retarg = 0;

  status = __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_date_REF_(_db, _m, d, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_date_REF___IN_int16__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, Date * d, const eyedblib::int16 tz_hour, const eyedblib::int16 tz_min, TimeStamp * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_date_REF___IN_int16__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Date * d = (Date *)_array[0]->getObject();
  const eyedblib::int16 tz_hour = *_array[1]->getInteger16();
  const eyedblib::int16 tz_min = *_array[2]->getInteger16();
  TimeStamp * _retarg = 0;

  status = __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_date_REF___IN_int16__IN_int16(_db, _m, d, tz_hour, tz_min, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * ts, TimeStamp * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * ts = _array[0]->getString();
  TimeStamp * _retarg = 0;

  status = __method_static_OUT_time_stamp_REF__time_stamp_time_stamp__IN_string(_db, _m, ts, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_int64_usec_time_stamp_time_stamp__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * ts, eyedblib::int64 &retarg);

extern "C" eyedb::Status
method_static_OUT_int64_usec_time_stamp_time_stamp__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * ts = _array[0]->getString();
  eyedblib::int64 _retarg = 0;

  status = __method_static_OUT_int64_usec_time_stamp_time_stamp__IN_string(_db, _m, ts, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_date_REF__date_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Date * &retarg);

extern "C" eyedb::Status
method__OUT_date_REF__date_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Date * _retarg = 0;

  status = __method__OUT_date_REF__date_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_time_REF__time_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, Time * &retarg);

extern "C" eyedb::Status
method__OUT_time_REF__time_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  Time * _retarg = 0;

  status = __method__OUT_time_REF__time_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int32_year_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method__OUT_int32_year_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_year_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_month_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_month_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_month_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_day_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_day_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_day_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_hour_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_hour_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_hour_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_minute_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_minute_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_minute_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_second_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_second_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_second_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_millisecond_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_millisecond_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_millisecond_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_tz_hour_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_tz_hour_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_tz_hour_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_tz_minute_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_tz_minute_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_tz_minute_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_string_toString_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, char * &retarg);

extern "C" eyedb::Status
method__OUT_string_toString_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  char * _retarg = 0;

  status = __method__OUT_string_toString_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_time_stamp_REF__plus_time_stamp__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeInterval * i, TimeStamp * &retarg);

extern "C" eyedb::Status
method__OUT_time_stamp_REF__plus_time_stamp__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeInterval * i = (TimeInterval *)_array[0]->getObject();
  TimeStamp * _retarg = 0;

  status = __method__OUT_time_stamp_REF__plus_time_stamp__IN_time_interval_REF_(_db, _m, _o, i, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_time_stamp_REF__minus_time_stamp__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeInterval * i, TimeStamp * &retarg);

extern "C" eyedb::Status
method__OUT_time_stamp_REF__minus_time_stamp__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeInterval * i = (TimeInterval *)_array[0]->getObject();
  TimeStamp * _retarg = 0;

  status = __method__OUT_time_stamp_REF__minus_time_stamp__IN_time_interval_REF_(_db, _m, _o, i, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_equal_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeStamp * ts, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_equal_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeStamp * ts = (TimeStamp *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_equal_time_stamp__IN_time_stamp_REF_(_db, _m, _o, ts, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_greater_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeStamp * ts, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_greater_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeStamp * ts = (TimeStamp *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_greater_time_stamp__IN_time_stamp_REF_(_db, _m, _o, ts, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_greater_or_equal_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeStamp * ts, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_greater_or_equal_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeStamp * ts = (TimeStamp *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_greater_or_equal_time_stamp__IN_time_stamp_REF_(_db, _m, _o, ts, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_less_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeStamp * ts, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_less_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeStamp * ts = (TimeStamp *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_less_time_stamp__IN_time_stamp_REF_(_db, _m, _o, ts, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_less_or_equal_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeStamp * ts, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_less_or_equal_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeStamp * ts = (TimeStamp *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_less_or_equal_time_stamp__IN_time_stamp_REF_(_db, _m, _o, ts, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_between_time_stamp__IN_time_stamp_REF___IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeStamp * ts1, TimeStamp * ts2, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_between_time_stamp__IN_time_stamp_REF___IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeStamp * ts1 = (TimeStamp *)_array[0]->getObject();
  TimeStamp * ts2 = (TimeStamp *)_array[1]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_between_time_stamp__IN_time_stamp_REF___IN_time_stamp_REF_(_db, _m, _o, ts1, ts2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_gmt_hour_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_gmt_hour_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_gmt_hour_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_gmt_minute_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_gmt_minute_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_gmt_minute_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_microsecond_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_microsecond_time_stamp(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_microsecond_time_stamp(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_void_set_usecs_time_stamp__IN_int64__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int64 usec, const eyedblib::int16 tz);

extern "C" eyedb::Status
method__OUT_void_set_usecs_time_stamp__IN_int64__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int64 usec = *_array[0]->getInteger64();
  const eyedblib::int16 tz = *_array[1]->getInteger16();

  status = __method__OUT_void_set_usecs_time_stamp__IN_int64__IN_int16(_db, _m, _o, usec, tz);
  if (status) return status;

  return eyedb::Success;
}

extern eyedb::Status __method__OUT_time_interval_REF__substract_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeStamp * ts, TimeInterval * &retarg);

extern "C" eyedb::Status
method__OUT_time_interval_REF__substract_time_stamp__IN_time_stamp_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeStamp * ts = (TimeStamp *)_array[0]->getObject();
  TimeInterval * _retarg = 0;

  status = __method__OUT_time_interval_REF__substract_time_stamp__IN_time_stamp_REF_(_db, _m, _o, ts, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_interval_REF__time_interval_time_interval__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int64 usecs, TimeInterval * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_interval_REF__time_interval_time_interval__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int64 usecs = *_array[0]->getInteger64();
  TimeInterval * _retarg = 0;

  status = __method_static_OUT_time_interval_REF__time_interval_time_interval__IN_int64(_db, _m, usecs, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_time_interval_REF__time_interval_time_interval__IN_int32__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int32 day, const eyedblib::int16 hours, const eyedblib::int16 min, const eyedblib::int16 sec, const eyedblib::int16 msec, const eyedblib::int16 usec, TimeInterval * &retarg);

extern "C" eyedb::Status
method_static_OUT_time_interval_REF__time_interval_time_interval__IN_int32__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 day = *_array[0]->getInteger32();
  const eyedblib::int16 hours = *_array[1]->getInteger16();
  const eyedblib::int16 min = *_array[2]->getInteger16();
  const eyedblib::int16 sec = *_array[3]->getInteger16();
  const eyedblib::int16 msec = *_array[4]->getInteger16();
  const eyedblib::int16 usec = *_array[5]->getInteger16();
  TimeInterval * _retarg = 0;

  status = __method_static_OUT_time_interval_REF__time_interval_time_interval__IN_int32__IN_int16__IN_int16__IN_int16__IN_int16__IN_int16(_db, _m, day, hours, min, sec, msec, usec, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int32_day_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method__OUT_int32_day_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_day_time_interval(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_hour_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_hour_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_hour_time_interval(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_minute_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_minute_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_minute_time_interval(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_second_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_second_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_second_time_interval(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_millisecond_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_millisecond_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_millisecond_time_interval(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_microsecond_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_microsecond_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_microsecond_time_interval(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_zero_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_zero_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_zero_time_interval(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_string_toString_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, char * &retarg);

extern "C" eyedb::Status
method__OUT_string_toString_time_interval(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  char * _retarg = 0;

  status = __method__OUT_string_toString_time_interval(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_time_interval_REF__plus_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeInterval * i, TimeInterval * &retarg);

extern "C" eyedb::Status
method__OUT_time_interval_REF__plus_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeInterval * i = (TimeInterval *)_array[0]->getObject();
  TimeInterval * _retarg = 0;

  status = __method__OUT_time_interval_REF__plus_time_interval__IN_time_interval_REF_(_db, _m, _o, i, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_time_interval_REF__minus_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeInterval * i, TimeInterval * &retarg);

extern "C" eyedb::Status
method__OUT_time_interval_REF__minus_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeInterval * i = (TimeInterval *)_array[0]->getObject();
  TimeInterval * _retarg = 0;

  status = __method__OUT_time_interval_REF__minus_time_interval__IN_time_interval_REF_(_db, _m, _o, i, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_time_interval_REF__product_time_interval__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int64 val, TimeInterval * &retarg);

extern "C" eyedb::Status
method__OUT_time_interval_REF__product_time_interval__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int64 val = *_array[0]->getInteger64();
  TimeInterval * _retarg = 0;

  status = __method__OUT_time_interval_REF__product_time_interval__IN_int64(_db, _m, _o, val, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_time_interval_REF__quotient_time_interval__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int64 val, TimeInterval * &retarg);

extern "C" eyedb::Status
method__OUT_time_interval_REF__quotient_time_interval__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int64 val = *_array[0]->getInteger64();
  TimeInterval * _retarg = 0;

  status = __method__OUT_time_interval_REF__quotient_time_interval__IN_int64(_db, _m, _o, val, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_equal_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeInterval * i, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_equal_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeInterval * i = (TimeInterval *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_equal_time_interval__IN_time_interval_REF_(_db, _m, _o, i, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_greater_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeInterval * i, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_greater_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeInterval * i = (TimeInterval *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_greater_time_interval__IN_time_interval_REF_(_db, _m, _o, i, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_greater_or_equal_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeInterval * i, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_greater_or_equal_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeInterval * i = (TimeInterval *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_greater_or_equal_time_interval__IN_time_interval_REF_(_db, _m, _o, i, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_less_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeInterval * i, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_less_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeInterval * i = (TimeInterval *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_less_time_interval__IN_time_interval_REF_(_db, _m, _o, i, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int16_is_less_or_equal_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, TimeInterval * i, eyedblib::int16 &retarg);

extern "C" eyedb::Status
method__OUT_int16_is_less_or_equal_time_interval__IN_time_interval_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  TimeInterval * i = (TimeInterval *)_array[0]->getObject();
  eyedblib::int16 _retarg = 0;

  status = __method__OUT_int16_is_less_or_equal_time_interval__IN_time_interval_REF_(_db, _m, _o, i, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_void_set_usecs_time_interval__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int64 usecs);

extern "C" eyedb::Status
method__OUT_void_set_usecs_time_interval__IN_int64(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int64 usecs = *_array[0]->getInteger64();

  status = __method__OUT_void_set_usecs_time_interval__IN_int64(_db, _m, _o, usecs);
  if (status) return status;

  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_ostring_REF__ostring_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, OString * &retarg);

extern "C" eyedb::Status
method_static_OUT_ostring_REF__ostring_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  OString * _retarg = 0;

  status = __method_static_OUT_ostring_REF__ostring_ostring(_db, _m, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_ostring_REF__ostring_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * s, OString * &retarg);

extern "C" eyedb::Status
method_static_OUT_ostring_REF__ostring_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  OString * _retarg = 0;

  status = __method_static_OUT_ostring_REF__ostring_ostring__IN_string(_db, _m, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_ostring_REF__ostring_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * s, const eyedblib::int32 len, OString * &retarg);

extern "C" eyedb::Status
method_static_OUT_ostring_REF__ostring_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  const eyedblib::int32 len = *_array[1]->getInteger32();
  OString * _retarg = 0;

  status = __method_static_OUT_ostring_REF__ostring_ostring__IN_string__IN_int32(_db, _m, s, len, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_ostring_REF__ostring_ostring__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * s, const eyedblib::int32 offset, const eyedblib::int32 len, OString * &retarg);

extern "C" eyedb::Status
method_static_OUT_ostring_REF__ostring_ostring__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  const eyedblib::int32 offset = *_array[1]->getInteger32();
  const eyedblib::int32 len = *_array[2]->getInteger32();
  OString * _retarg = 0;

  status = __method_static_OUT_ostring_REF__ostring_ostring__IN_string__IN_int32__IN_int32(_db, _m, s, offset, len, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_ostring_REF__ostring_ostring__IN_ostring_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, OString * s, OString * &retarg);

extern "C" eyedb::Status
method_static_OUT_ostring_REF__ostring_ostring__IN_ostring_REF_(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  OString * s = (OString *)_array[0]->getObject();
  OString * _retarg = 0;

  status = __method_static_OUT_ostring_REF__ostring_ostring__IN_ostring_REF_(_db, _m, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_ostring_REF__ostring_ostring__IN_char(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char s, OString * &retarg);

extern "C" eyedb::Status
method_static_OUT_ostring_REF__ostring_ostring__IN_char(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char s = *_array[0]->getChar();
  OString * _retarg = 0;

  status = __method_static_OUT_ostring_REF__ostring_ostring__IN_char(_db, _m, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_ostring_REF__ostring_ostring__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, const eyedblib::int32 s, OString * &retarg);

extern "C" eyedb::Status
method_static_OUT_ostring_REF__ostring_ostring__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 s = *_array[0]->getInteger32();
  OString * _retarg = 0;

  status = __method_static_OUT_ostring_REF__ostring_ostring__IN_int32(_db, _m, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_ostring_REF__ostring_ostring__IN_float(eyedb::Database *_db, eyedb::FEMethod_C *_m, const double s, OString * &retarg);

extern "C" eyedb::Status
method_static_OUT_ostring_REF__ostring_ostring__IN_float(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const double s = *_array[0]->getFloat();
  OString * _retarg = 0;

  status = __method_static_OUT_ostring_REF__ostring_ostring__IN_float(_db, _m, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_int32_strlen_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * s, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method_static_OUT_int32_strlen_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  eyedblib::int32 _retarg = 0;

  status = __method_static_OUT_int32_strlen_ostring__IN_string(_db, _m, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_int32_strcmp_ostring__IN_string__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * s1, const char * s2, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method_static_OUT_int32_strcmp_ostring__IN_string__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s1 = _array[0]->getString();
  const char * s2 = _array[1]->getString();
  eyedblib::int32 _retarg = 0;

  status = __method_static_OUT_int32_strcmp_ostring__IN_string__IN_string(_db, _m, s1, s2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_int32_strstr_ostring__IN_string__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * s1, const char * s2, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method_static_OUT_int32_strstr_ostring__IN_string__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s1 = _array[0]->getString();
  const char * s2 = _array[1]->getString();
  eyedblib::int32 _retarg = 0;

  status = __method_static_OUT_int32_strstr_ostring__IN_string__IN_string(_db, _m, s1, s2, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_string_substr_ostring__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * s, const eyedblib::int32 offset, const eyedblib::int32 len, char * &retarg);

extern "C" eyedb::Status
method_static_OUT_string_substr_ostring__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  const eyedblib::int32 offset = *_array[1]->getInteger32();
  const eyedblib::int32 len = *_array[2]->getInteger32();
  char * _retarg = 0;

  status = __method_static_OUT_string_substr_ostring__IN_string__IN_int32__IN_int32(_db, _m, s, offset, len, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_string_toLower_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * s, char * &retarg);

extern "C" eyedb::Status
method_static_OUT_string_toLower_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  char * _retarg = 0;

  status = __method_static_OUT_string_toLower_ostring__IN_string(_db, _m, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_string_toUpper_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * s, char * &retarg);

extern "C" eyedb::Status
method_static_OUT_string_toUpper_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  char * _retarg = 0;

  status = __method_static_OUT_string_toUpper_ostring__IN_string(_db, _m, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_string_rtrim_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * s, char * &retarg);

extern "C" eyedb::Status
method_static_OUT_string_rtrim_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  char * _retarg = 0;

  status = __method_static_OUT_string_rtrim_ostring__IN_string(_db, _m, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_string_ltrim_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * s, char * &retarg);

extern "C" eyedb::Status
method_static_OUT_string_ltrim_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  char * _retarg = 0;

  status = __method_static_OUT_string_ltrim_ostring__IN_string(_db, _m, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method_static_OUT_ostring_REF__concat_ostring__IN_string__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, const char * s1, const char * s2, OString * &retarg);

extern "C" eyedb::Status
method_static_OUT_ostring_REF__concat_ostring__IN_string__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s1 = _array[0]->getString();
  const char * s2 = _array[1]->getString();
  OString * _retarg = 0;

  status = __method_static_OUT_ostring_REF__concat_ostring__IN_string__IN_string(_db, _m, s1, s2, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__append_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__append_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__append_ostring__IN_string(_db, _m, _o, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__append_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, const eyedblib::int32 len, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__append_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  const eyedblib::int32 len = *_array[1]->getInteger32();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__append_ostring__IN_string__IN_int32(_db, _m, _o, s, len, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__append_ostring__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, const eyedblib::int32 offset, const eyedblib::int32 len, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__append_ostring__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  const eyedblib::int32 offset = *_array[1]->getInteger32();
  const eyedblib::int32 len = *_array[2]->getInteger32();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__append_ostring__IN_string__IN_int32__IN_int32(_db, _m, _o, s, offset, len, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__prepend_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__prepend_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__prepend_ostring__IN_string(_db, _m, _o, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__prepend_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, const eyedblib::int32 len, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__prepend_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  const eyedblib::int32 len = *_array[1]->getInteger32();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__prepend_ostring__IN_string__IN_int32(_db, _m, _o, s, len, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__prepend_ostring__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, const eyedblib::int32 offset, const eyedblib::int32 len, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__prepend_ostring__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  const eyedblib::int32 offset = *_array[1]->getInteger32();
  const eyedblib::int32 len = *_array[2]->getInteger32();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__prepend_ostring__IN_string__IN_int32__IN_int32(_db, _m, _o, s, offset, len, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__insert_ostring__IN_int32__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int32 offset, const char * s, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__insert_ostring__IN_int32__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 offset = *_array[0]->getInteger32();
  const char * s = _array[1]->getString();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__insert_ostring__IN_int32__IN_string(_db, _m, _o, offset, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__insert_ostring__IN_int32__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int32 offset, const char * arg2, const eyedblib::int32 len, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__insert_ostring__IN_int32__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 offset = *_array[0]->getInteger32();
  const char * arg2 = _array[1]->getString();
  const eyedblib::int32 len = *_array[2]->getInteger32();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__insert_ostring__IN_int32__IN_string__IN_int32(_db, _m, _o, offset, arg2, len, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__insert_ostring__IN_int32__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int32 offset, const char * arg2, const eyedblib::int32 offset2, const eyedblib::int32 len, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__insert_ostring__IN_int32__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 offset = *_array[0]->getInteger32();
  const char * arg2 = _array[1]->getString();
  const eyedblib::int32 offset2 = *_array[2]->getInteger32();
  const eyedblib::int32 len = *_array[3]->getInteger32();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__insert_ostring__IN_int32__IN_string__IN_int32__IN_int32(_db, _m, _o, offset, arg2, offset2, len, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int32_first_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method__OUT_int32_first_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_first_ostring__IN_string(_db, _m, _o, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int32_last_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method__OUT_int32_last_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_last_ostring__IN_string(_db, _m, _o, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int32_find_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, const eyedblib::int32 offset, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method__OUT_int32_find_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  const eyedblib::int32 offset = *_array[1]->getInteger32();
  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_find_ostring__IN_string__IN_int32(_db, _m, _o, s, offset, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__substr_ostring__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int32 offset, const eyedblib::int32 len, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__substr_ostring__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 offset = *_array[0]->getInteger32();
  const eyedblib::int32 len = *_array[1]->getInteger32();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__substr_ostring__IN_int32__IN_int32(_db, _m, _o, offset, len, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__substr_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * regexp, const eyedblib::int32 offset, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__substr_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * regexp = _array[0]->getString();
  const eyedblib::int32 offset = *_array[1]->getInteger32();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__substr_ostring__IN_string__IN_int32(_db, _m, _o, regexp, offset, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__erase_ostring__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int32 offset, const eyedblib::int32 len, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__erase_ostring__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 offset = *_array[0]->getInteger32();
  const eyedblib::int32 len = *_array[1]->getInteger32();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__erase_ostring__IN_int32__IN_int32(_db, _m, _o, offset, len, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__replace_ostring__IN_int32__IN_int32__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int32 offset, const eyedblib::int32 len, const char * arg3, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__replace_ostring__IN_int32__IN_int32__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 offset = *_array[0]->getInteger32();
  const eyedblib::int32 len = *_array[1]->getInteger32();
  const char * arg3 = _array[2]->getString();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__replace_ostring__IN_int32__IN_int32__IN_string(_db, _m, _o, offset, len, arg3, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__replace_ostring__IN_int32__IN_int32__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int32 offset, const eyedblib::int32 len, const char * arg3, const eyedblib::int32 len2, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__replace_ostring__IN_int32__IN_int32__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 offset = *_array[0]->getInteger32();
  const eyedblib::int32 len = *_array[1]->getInteger32();
  const char * arg3 = _array[2]->getString();
  const eyedblib::int32 len2 = *_array[3]->getInteger32();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__replace_ostring__IN_int32__IN_int32__IN_string__IN_int32(_db, _m, _o, offset, len, arg3, len2, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__replace_ostring__IN_int32__IN_int32__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const eyedblib::int32 offset, const eyedblib::int32 len, const char * arg3, const eyedblib::int32 offset2, const eyedblib::int32 len2, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__replace_ostring__IN_int32__IN_int32__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const eyedblib::int32 offset = *_array[0]->getInteger32();
  const eyedblib::int32 len = *_array[1]->getInteger32();
  const char * arg3 = _array[2]->getString();
  const eyedblib::int32 offset2 = *_array[3]->getInteger32();
  const eyedblib::int32 len2 = *_array[4]->getInteger32();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__replace_ostring__IN_int32__IN_int32__IN_string__IN_int32__IN_int32(_db, _m, _o, offset, len, arg3, offset2, len2, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__replace_ostring__IN_string__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s1, const char * s2, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__replace_ostring__IN_string__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s1 = _array[0]->getString();
  const char * s2 = _array[1]->getString();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__replace_ostring__IN_string__IN_string(_db, _m, _o, s1, s2, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_void_reset_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o);

extern "C" eyedb::Status
method__OUT_void_reset_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;


  status = __method__OUT_void_reset_ostring(_db, _m, _o);
  if (status) return status;

  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__assign_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, const eyedblib::int32 len, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__assign_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  const eyedblib::int32 len = *_array[1]->getInteger32();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__assign_ostring__IN_string__IN_int32(_db, _m, _o, s, len, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__assign_ostring__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, const eyedblib::int32 offset, const eyedblib::int32 len, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__assign_ostring__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  const eyedblib::int32 offset = *_array[1]->getInteger32();
  const eyedblib::int32 len = *_array[2]->getInteger32();
  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__assign_ostring__IN_string__IN_int32__IN_int32(_db, _m, _o, s, offset, len, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__toLower_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__toLower_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__toLower_ostring(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__toUpper_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__toUpper_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__toUpper_ostring(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__rtrim_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__rtrim_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__rtrim_ostring(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_ostring_REF__ltrim_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, OString * &retarg);

extern "C" eyedb::Status
method__OUT_ostring_REF__ltrim_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  OString * _retarg = 0;

  status = __method__OUT_ostring_REF__ltrim_ostring(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int32_compare_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method__OUT_int32_compare_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_compare_ostring__IN_string(_db, _m, _o, s, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int32_compare_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, const eyedblib::int32 to, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method__OUT_int32_compare_ostring__IN_string__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  const eyedblib::int32 to = *_array[1]->getInteger32();
  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_compare_ostring__IN_string__IN_int32(_db, _m, _o, s, to, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int32_compare_ostring__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * s, const eyedblib::int32 from, const eyedblib::int32 to, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method__OUT_int32_compare_ostring__IN_string__IN_int32__IN_int32(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * s = _array[0]->getString();
  const eyedblib::int32 from = *_array[1]->getInteger32();
  const eyedblib::int32 to = *_array[2]->getInteger32();
  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_compare_ostring__IN_string__IN_int32__IN_int32(_db, _m, _o, s, from, to, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int32_is_null_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method__OUT_int32_is_null_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_is_null_ostring(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int32_match_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * regexp, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method__OUT_int32_match_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * regexp = _array[0]->getString();
  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_match_ostring__IN_string(_db, _m, _o, regexp, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_int32_length_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedblib::int32 &retarg);

extern "C" eyedb::Status
method__OUT_int32_length_ostring(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  eyedblib::int32 _retarg = 0;

  status = __method__OUT_int32_length_ostring(_db, _m, _o, _retarg);
  if (status) return status;

  __retarg.set(_retarg);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_string_ARRAY__split_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * separator, char * * &retarg, int &retarg_cnt);

extern "C" eyedb::Status
method__OUT_string_ARRAY__split_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * separator = _array[0]->getString();
  int _retarg_cnt = 0;
  char * *_retarg = 0;

  status = __method__OUT_string_ARRAY__split_ostring__IN_string(_db, _m, _o, separator, _retarg, _retarg_cnt);
  if (status) return status;

  __retarg.set(_retarg, _retarg_cnt, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

extern eyedb::Status __method__OUT_string_ARRAY__regexp_split_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, const char * regexp_separator, char * * &retarg, int &retarg_cnt);

extern "C" eyedb::Status
method__OUT_string_ARRAY__regexp_split_ostring__IN_string(eyedb::Database *_db, eyedb::FEMethod_C *_m, eyedb::Object *_o, eyedb::ArgArray &_array, eyedb::Argument &__retarg)
{
  eyedb::Status status;

  const char * regexp_separator = _array[0]->getString();
  int _retarg_cnt = 0;
  char * *_retarg = 0;

  status = __method__OUT_string_ARRAY__regexp_split_ostring__IN_string(_db, _m, _o, regexp_separator, _retarg, _retarg_cnt);
  if (status) return status;

  __retarg.set(_retarg, _retarg_cnt, eyedb::Argument::AutoFullGarbage);
  return eyedb::Success;
}

