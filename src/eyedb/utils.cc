
/*
 * EyeDB Version 2.8.8 Copyright (c) 1995-2006 SYSRA
 *
 * File 'utils.cc'
 *
 * Package Name 'utils'
 *
 * Generated by eyedbodl at Thu Sep 10 15:17:13 2009
 *
 * ---------------------------------------------------
 * -------------- DO NOT EDIT THIS CODE --------------
 * ---------------------------------------------------
 *
 */

#include <eyedb/eyedb.h>

#include <eyedb/internals/ObjectPeer.h>
#include <eyedb/internals/ClassPeer.h>
#include <eyedb/internals/kern_const.h>

#include <eyedb/utils.h>

#define min(x,y)((x)<(y)?(x):(y))

namespace eyedb {

static eyedb::Bool dynget_error_policy = eyedb::False;
static eyedb::Bool dynset_error_policy = eyedb::True;
static eyedb::Oid nulloid;
static unsigned char nulldata[1];
static eyedb::Bool oid_check = eyedb::True;
static int class_ind;
static eyedb::Database::consapp_t *constructors_x = new eyedb::Database::consapp_t[104];
static eyedb::Object *(*constructors[104])(const eyedb::Object *, eyedb::Bool);
static eyedb::GenHashTable *hash;
#define make_object utilsMakeObject
extern void utilsInit(void);
extern void utilsRelease(void);
extern eyedb::Status utilsSchemaUpdate(eyedb::Database *);
extern eyedb::Status utilsSchemaUpdate(eyedb::Schema *);

static eyedb::Class *index_Class = new eyedb::Class("index");

void utils::init()
{
  utilsInit();
}

void utils::release()
{
  utilsRelease();
}

eyedb::Status utils::updateSchema(eyedb::Database *db)
{
  return utilsSchemaUpdate(db);
}

eyedb::Status utils::updateSchema(eyedb::Schema *m)
{
  return utilsSchemaUpdate(m);
}

eyedb::EnumClass *ImageType_Class;
eyedb::EnumClass *Month_Class;
eyedb::EnumClass *Weekday_Class;
eyedb::StructClass *Image_Class;
eyedb::StructClass *CURL_Class;
eyedb::StructClass *WConfig_Class;
eyedb::StructClass *Date_Class;
eyedb::StructClass *Time_Class;
eyedb::StructClass *TimeStamp_Class;
eyedb::StructClass *TimeInterval_Class;
eyedb::StructClass *OString_Class;

static eyedb::Size ImageType_idr_objsz, ImageType_idr_psize;

static eyedb::EnumClass *ImageType_make(eyedb::EnumClass *ImageType_class = 0, eyedb::Schema *m = 0)
{
  if (!ImageType_class)
    return new eyedb::EnumClass("image_type");
  eyedb::EnumItem *en[7];
  en[0] = new eyedb::EnumItem("GIF_IMG_TYPE", "GIF_IMG_TYPE", (unsigned int)1);
  en[1] = new eyedb::EnumItem("JPEG_IMG_TYPE", "JPEG_IMG_TYPE", (unsigned int)2);
  en[2] = new eyedb::EnumItem("PM_IMG_TYPE", "PM_IMG_TYPE", (unsigned int)3);
  en[3] = new eyedb::EnumItem("PBM_IMG_TYPE", "PBM_IMG_TYPE", (unsigned int)4);
  en[4] = new eyedb::EnumItem("X11BITMAP_IMG_TYPE", "X11BITMAP_IMG_TYPE", (unsigned int)5);
  en[5] = new eyedb::EnumItem("BMP_IMG_TYPE", "BMP_IMG_TYPE", (unsigned int)6);
  en[6] = new eyedb::EnumItem("TIFF_IMG_TYPE", "TIFF_IMG_TYPE", (unsigned int)7);

  ImageType_class->setEnumItems(en, 7);

  delete en[0];
  delete en[1];
  delete en[2];
  delete en[3];
  delete en[4];
  delete en[5];
  delete en[6];

  eyedb::ClassPeer::setMType(ImageType_class, eyedb::Class::System);

  return ImageType_class;
}

static void ImageType_init_p()
{
  ImageType_Class = ImageType_make();
}

static void ImageType_init()
{
  ImageType_make(ImageType_Class);

  ImageType_idr_objsz = ImageType_Class->getIDRObjectSize(&ImageType_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(ImageType_Class, eyedb::True);
}

static eyedb::Size Month_idr_objsz, Month_idr_psize;

static eyedb::EnumClass *Month_make(eyedb::EnumClass *Month_class = 0, eyedb::Schema *m = 0)
{
  if (!Month_class)
    return new eyedb::EnumClass("month");
  eyedb::EnumItem *en[12];
  en[0] = new eyedb::EnumItem("JANUARY", "January", (unsigned int)1);
  en[1] = new eyedb::EnumItem("FEBRUARY", "February", (unsigned int)2);
  en[2] = new eyedb::EnumItem("MARCH", "March", (unsigned int)3);
  en[3] = new eyedb::EnumItem("APRIL", "April", (unsigned int)4);
  en[4] = new eyedb::EnumItem("MAY", "May", (unsigned int)5);
  en[5] = new eyedb::EnumItem("JUNE", "June", (unsigned int)6);
  en[6] = new eyedb::EnumItem("JULY", "July", (unsigned int)7);
  en[7] = new eyedb::EnumItem("AUGUST", "August", (unsigned int)8);
  en[8] = new eyedb::EnumItem("SEPTEMBER", "September", (unsigned int)9);
  en[9] = new eyedb::EnumItem("OCTOBER", "October", (unsigned int)10);
  en[10] = new eyedb::EnumItem("NOVEMBER", "November", (unsigned int)11);
  en[11] = new eyedb::EnumItem("DECEMBER", "December", (unsigned int)12);

  Month_class->setEnumItems(en, 12);

  delete en[0];
  delete en[1];
  delete en[2];
  delete en[3];
  delete en[4];
  delete en[5];
  delete en[6];
  delete en[7];
  delete en[8];
  delete en[9];
  delete en[10];
  delete en[11];

  eyedb::ClassPeer::setMType(Month_class, eyedb::Class::System);

  return Month_class;
}

static void Month_init_p()
{
  Month_Class = Month_make();
}

static void Month_init()
{
  Month_make(Month_Class);

  Month_idr_objsz = Month_Class->getIDRObjectSize(&Month_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(Month_Class, eyedb::True);
}

static eyedb::Size Weekday_idr_objsz, Weekday_idr_psize;

static eyedb::EnumClass *Weekday_make(eyedb::EnumClass *Weekday_class = 0, eyedb::Schema *m = 0)
{
  if (!Weekday_class)
    return new eyedb::EnumClass("weekday");
  eyedb::EnumItem *en[7];
  en[0] = new eyedb::EnumItem("SUNDAY", "Sunday", (unsigned int)0);
  en[1] = new eyedb::EnumItem("MONDAY", "Monday", (unsigned int)1);
  en[2] = new eyedb::EnumItem("TUESDAY", "Tuesday", (unsigned int)2);
  en[3] = new eyedb::EnumItem("WEDNESDAY", "Wednesday", (unsigned int)3);
  en[4] = new eyedb::EnumItem("THURSDAY", "Thursday", (unsigned int)4);
  en[5] = new eyedb::EnumItem("FRIDAY", "Friday", (unsigned int)5);
  en[6] = new eyedb::EnumItem("SATURDAY", "Saturday", (unsigned int)6);

  Weekday_class->setEnumItems(en, 7);

  delete en[0];
  delete en[1];
  delete en[2];
  delete en[3];
  delete en[4];
  delete en[5];
  delete en[6];

  eyedb::ClassPeer::setMType(Weekday_class, eyedb::Class::System);

  return Weekday_class;
}

static void Weekday_init_p()
{
  Weekday_Class = Weekday_make();
}

static void Weekday_init()
{
  Weekday_make(Weekday_Class);

  Weekday_idr_objsz = Weekday_Class->getIDRObjectSize(&Weekday_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(Weekday_Class, eyedb::True);
}

static const eyedb::Attribute **Image_agritems;
static eyedb::Size Image_idr_objsz, Image_idr_psize;

static eyedb::StructClass *Image_make(eyedb::StructClass *Image_class = 0, eyedb::Schema *m = 0)
{
  if (!Image_class)
    return new eyedb::StructClass("image", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[7];
  int *dims;

  dims = new int[1];
  dims[0] = -1;
  attr[2] = new eyedb::Attribute((m ? m->getClass("char") : eyedb::Char_Class), "name", eyedb::False, 1, dims);
  delete[] dims;

  dims = 0;
  attr[3] = new eyedb::Attribute((m ? m->getClass("image_type") : ImageType_Class), "type", eyedb::False, 0, dims);

  dims = new int[1];
  dims[0] = -1;
  attr[4] = new eyedb::Attribute((m ? m->getClass("byte") : eyedb::Byte_Class), "data", eyedb::False, 1, dims);
  delete[] dims;

  dims = 0;
  attr[5] = new eyedb::Attribute((m ? m->getClass("int") : eyedb::Int32_Class), "w", eyedb::False, 0, dims);

  dims = 0;
  attr[6] = new eyedb::Attribute((m ? m->getClass("int") : eyedb::Int32_Class), "h", eyedb::False, 0, dims);

  Image_class->setAttributes(&attr[2], 5);

  delete attr[2];
  delete attr[3];
  delete attr[4];
  delete attr[5];
  delete attr[6];

  eyedb::ClassPeer::setMType(Image_class, eyedb::Class::System);

  return Image_class;
}

eyedb::Object *Image_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new Image(cls, idr);
}

eyedb::Object *Image_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new Image((const eyedb::Struct *)o, share);
}

static void Image_init_p()
{
  Image_Class = Image_make();
  constructors_x[class_ind] = Image_construct_x;
  constructors[class_ind] = Image_construct;
  hash->insert("image", class_ind++);
}

static void Image_init()
{
  Image_make(Image_Class);

  Image_agritems = Image_Class->getAttributes();
  Image_idr_objsz = Image_Class->getIDRObjectSize(&Image_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(Image_Class, eyedb::True);
}

static eyedb::Status Image_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

Image::Image(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

Image::Image(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void Image::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("image") : Image_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

Image::Image(const Image& x) : eyedb::Struct(x)
{
  userCopy(x);
}

Image& Image::operator=(const Image& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

Image::Image(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("image") : Image_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

Image::Image(const Image *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("image") : Image_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

eyedb::Status Image::setName(const std::string &_name)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size size;
  eyedb::Size len = _name.size() + 1;

  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[2]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)_name.c_str(), len, 0);
  return status;

}

eyedb::Status Image::setName(unsigned int a0, char _name)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[2]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)&_name, 1, from);
  return status;
}

std::string Image::getName(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Data data;
  eyedb::Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&data, eyedb::Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char Image::getName(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status Image::setType(ImageType::Type _type, eyedb::Bool _check_value)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedblib::int32 __tmp = _type;

  status = getClass()->getAttributes()[3]->setValue(this, (eyedb::Data)&__tmp, 1, 0, _check_value);
  return status;
}

ImageType::Type Image::getType(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int32  __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[3]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return (ImageType::Type)0;}
  return (ImageType::Type)__tmp;
}

eyedb::Status Image::setData(const unsigned char *_data, unsigned int len)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size size;
  status = getClass()->getAttributes()[4]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[4]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[4]->setValue(this, (eyedb::Data)_data, len, 0);
  return status;

}

eyedb::Status Image::setData(unsigned int a0, unsigned char _data)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[4]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[4]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[4]->setValue(this, (eyedb::Data)&_data, 1, from);
  return status;
}

eyedb::Status Image::setDataCount(unsigned int a0)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;
  status = getClass()->getAttributes()[4]->setSize(this, from);
  return status;
}

const unsigned char *Image::getData(unsigned int *len, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Data data;
  eyedb::Status s;

  s = getClass()->getAttributes()[4]->getValue(this, (eyedb::Data *)&data, eyedb::Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  if (len) *len = getDataCount();
  return (const unsigned char *)data;
}

unsigned char Image::getData(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  unsigned char __tmp = 0;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[4]->getValue(this, (eyedb::Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

unsigned int Image::getDataCount(eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Size size;
  eyedb::Status s;
  s = getClass()->getAttributes()[4]->getSize(this, size);
  if (s) {if (rs) *rs = s; return 0;}
  return (int)size;
}

eyedb::Status Image::setW(eyedblib::int32 _w)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[5]->setValue(this, (eyedb::Data)&_w, 1, 0);
  return status;
}

eyedblib::int32 Image::getW(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int32 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[5]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status Image::setH(eyedblib::int32 _h)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[6]->setValue(this, (eyedb::Data)&_h, 1, 0);
  return status;
}

eyedblib::int32 Image::getH(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int32 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[6]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const eyedb::Attribute **CURL_agritems;
static eyedb::Size CURL_idr_objsz, CURL_idr_psize;

static eyedb::StructClass *CURL_make(eyedb::StructClass *CURL_class = 0, eyedb::Schema *m = 0)
{
  if (!CURL_class)
    return new eyedb::StructClass("URL", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[4];
  int *dims;

  dims = new int[1];
  dims[0] = -1;
  attr[2] = new eyedb::Attribute((m ? m->getClass("char") : eyedb::Char_Class), "proto", eyedb::False, 1, dims);
  delete[] dims;

  dims = new int[1];
  dims[0] = -1;
  attr[3] = new eyedb::Attribute((m ? m->getClass("char") : eyedb::Char_Class), "url", eyedb::False, 1, dims);
  delete[] dims;

  CURL_class->setAttributes(&attr[2], 2);

  delete attr[2];
  delete attr[3];

  eyedb::ClassPeer::setMType(CURL_class, eyedb::Class::System);

  return CURL_class;
}

eyedb::Object *CURL_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new CURL(cls, idr);
}

eyedb::Object *CURL_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new CURL((const eyedb::Struct *)o, share);
}

static void CURL_init_p()
{
  CURL_Class = CURL_make();
  constructors_x[class_ind] = CURL_construct_x;
  constructors[class_ind] = CURL_construct;
  hash->insert("URL", class_ind++);
}

static void CURL_init()
{
  CURL_make(CURL_Class);

  CURL_agritems = CURL_Class->getAttributes();
  CURL_idr_objsz = CURL_Class->getIDRObjectSize(&CURL_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(CURL_Class, eyedb::True);
}

static eyedb::Status CURL_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

CURL::CURL(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

CURL::CURL(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void CURL::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("URL") : CURL_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

CURL::CURL(const CURL& x) : eyedb::Struct(x)
{
  userCopy(x);
}

CURL& CURL::operator=(const CURL& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

CURL::CURL(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("URL") : CURL_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

CURL::CURL(const CURL *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("URL") : CURL_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

eyedb::Status CURL::setProto(const std::string &_proto)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size size;
  eyedb::Size len = _proto.size() + 1;

  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[2]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)_proto.c_str(), len, 0);
  return status;

}

eyedb::Status CURL::setProto(unsigned int a0, char _proto)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[2]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)&_proto, 1, from);
  return status;
}

std::string CURL::getProto(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Data data;
  eyedb::Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&data, eyedb::Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char CURL::getProto(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status CURL::setUrl(const std::string &_url)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size size;
  eyedb::Size len = _url.size() + 1;

  status = getClass()->getAttributes()[3]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[3]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[3]->setValue(this, (eyedb::Data)_url.c_str(), len, 0);
  return status;

}

eyedb::Status CURL::setUrl(unsigned int a0, char _url)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[3]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[3]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[3]->setValue(this, (eyedb::Data)&_url, 1, from);
  return status;
}

std::string CURL::getUrl(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Data data;
  eyedb::Status s;

  s = getClass()->getAttributes()[3]->getValue(this, (eyedb::Data *)&data, eyedb::Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char CURL::getUrl(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[3]->getValue(this, (eyedb::Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const eyedb::Attribute **WConfig_agritems;
static eyedb::Size WConfig_idr_objsz, WConfig_idr_psize;

static eyedb::StructClass *WConfig_make(eyedb::StructClass *WConfig_class = 0, eyedb::Schema *m = 0)
{
  if (!WConfig_class)
    return new eyedb::StructClass("w_config", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[5];
  int *dims;

  dims = new int[1];
  dims[0] = -1;
  attr[2] = new eyedb::Attribute((m ? m->getClass("char") : eyedb::Char_Class), "name", eyedb::False, 1, dims);
  delete[] dims;

  dims = new int[1];
  dims[0] = -1;
  attr[3] = new eyedb::Attribute((m ? m->getClass("char") : eyedb::Char_Class), "user", eyedb::False, 1, dims);
  delete[] dims;

  dims = new int[1];
  dims[0] = -1;
  attr[4] = new eyedb::Attribute((m ? m->getClass("char") : eyedb::Char_Class), "conf", eyedb::False, 1, dims);
  delete[] dims;

  WConfig_class->setAttributes(&attr[2], 3);

  delete attr[2];
  delete attr[3];
  delete attr[4];

  eyedb::ClassPeer::setMType(WConfig_class, eyedb::Class::System);

  return WConfig_class;
}

eyedb::Object *WConfig_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new WConfig(cls, idr);
}

eyedb::Object *WConfig_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new WConfig((const eyedb::Struct *)o, share);
}

static void WConfig_init_p()
{
  WConfig_Class = WConfig_make();
  constructors_x[class_ind] = WConfig_construct_x;
  constructors[class_ind] = WConfig_construct;
  hash->insert("w_config", class_ind++);
}

static void WConfig_init()
{
  WConfig_make(WConfig_Class);

  WConfig_agritems = WConfig_Class->getAttributes();
  WConfig_idr_objsz = WConfig_Class->getIDRObjectSize(&WConfig_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(WConfig_Class, eyedb::True);
}

static eyedb::Status WConfig_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

WConfig::WConfig(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

WConfig::WConfig(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void WConfig::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("w_config") : WConfig_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

WConfig::WConfig(const WConfig& x) : eyedb::Struct(x)
{
  userCopy(x);
}

WConfig& WConfig::operator=(const WConfig& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

WConfig::WConfig(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("w_config") : WConfig_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

WConfig::WConfig(const WConfig *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("w_config") : WConfig_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

eyedb::Status WConfig::setName(const std::string &_name)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size size;
  eyedb::Size len = _name.size() + 1;

  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[2]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)_name.c_str(), len, 0);
  return status;

}

eyedb::Status WConfig::setName(unsigned int a0, char _name)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[2]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)&_name, 1, from);
  return status;
}

std::string WConfig::getName(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Data data;
  eyedb::Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&data, eyedb::Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char WConfig::getName(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status WConfig::setUser(const std::string &_user)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size size;
  eyedb::Size len = _user.size() + 1;

  status = getClass()->getAttributes()[3]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[3]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[3]->setValue(this, (eyedb::Data)_user.c_str(), len, 0);
  return status;

}

eyedb::Status WConfig::setUser(unsigned int a0, char _user)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[3]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[3]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[3]->setValue(this, (eyedb::Data)&_user, 1, from);
  return status;
}

std::string WConfig::getUser(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Data data;
  eyedb::Status s;

  s = getClass()->getAttributes()[3]->getValue(this, (eyedb::Data *)&data, eyedb::Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char WConfig::getUser(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[3]->getValue(this, (eyedb::Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status WConfig::setConf(const std::string &_conf)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size size;
  eyedb::Size len = _conf.size() + 1;

  status = getClass()->getAttributes()[4]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[4]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[4]->setValue(this, (eyedb::Data)_conf.c_str(), len, 0);
  return status;

}

eyedb::Status WConfig::setConf(unsigned int a0, char _conf)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[4]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[4]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[4]->setValue(this, (eyedb::Data)&_conf, 1, from);
  return status;
}

std::string WConfig::getConf(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Data data;
  eyedb::Status s;

  s = getClass()->getAttributes()[4]->getValue(this, (eyedb::Data *)&data, eyedb::Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char WConfig::getConf(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[4]->getValue(this, (eyedb::Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const eyedb::Attribute **Date_agritems;
static eyedb::Size Date_idr_objsz, Date_idr_psize;

static eyedb::StructClass *Date_make(eyedb::StructClass *Date_class = 0, eyedb::Schema *m = 0)
{
  if (!Date_class)
    return new eyedb::StructClass("date", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[3];
  int *dims;

  dims = 0;
  attr[2] = new eyedb::Attribute((m ? m->getClass("int") : eyedb::Int32_Class), "julian", eyedb::False, 0, dims);

  Date_class->setAttributes(&attr[2], 1);

  delete attr[2];

  eyedb::ClassPeer::setMType(Date_class, eyedb::Class::System);

  return Date_class;
}

eyedb::Object *Date_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new Date(cls, idr);
}

eyedb::Object *Date_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new Date((const eyedb::Struct *)o, share);
}

static void Date_init_p()
{
  Date_Class = Date_make();
  constructors_x[class_ind] = Date_construct_x;
  constructors[class_ind] = Date_construct;
  hash->insert("date", class_ind++);
}

static void Date_init()
{
  Date_make(Date_Class);

  Date_agritems = Date_Class->getAttributes();
  Date_idr_objsz = Date_Class->getIDRObjectSize(&Date_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(Date_Class, eyedb::True);
}

static eyedb::Status Date_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("date");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "date", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("date");
  comp = new eyedb::FEMethod_C(db, cls, "date", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "date", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("date");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("month");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "date", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "date", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "julian", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "year", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "month", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "day", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "day_of_year", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("month");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "month_of_year", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("weekday");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "day_of_week", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "toString", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "is_leap_year", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("date");
  comp = new eyedb::FEMethod_C(db, cls, "is_equal", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("date");
  comp = new eyedb::FEMethod_C(db, cls, "is_greater", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("date");
  comp = new eyedb::FEMethod_C(db, cls, "is_greater_or_equal", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("date");
  comp = new eyedb::FEMethod_C(db, cls, "is_less", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("date");
  comp = new eyedb::FEMethod_C(db, cls, "is_less_or_equal", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("date");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("date");
  comp = new eyedb::FEMethod_C(db, cls, "is_between", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("weekday");
  comp = new eyedb::FEMethod_C(db, cls, "next", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("weekday");
  comp = new eyedb::FEMethod_C(db, cls, "previous", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "add_days", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("date");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "substract_days", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("date");
  comp = new eyedb::FEMethod_C(db, cls, "substract_date", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "set_julian", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return eyedb::Success;
}

static eyedb::Status Date_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

Date::Date(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

Date::Date(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void Date::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("date") : Date_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

Date::Date(const Date& x) : eyedb::Struct(x)
{
  userCopy(x);
}

Date& Date::operator=(const Date& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

Date::Date(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("date") : Date_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

Date::Date(const Date *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("date") : Date_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

eyedb::Status Date::setJulian(eyedblib::int32 _julian)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)&_julian, 1, 0);
  return status;
}

eyedblib::int32 Date::getJulian(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int32 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const eyedb::Attribute **Time_agritems;
static eyedb::Size Time_idr_objsz, Time_idr_psize;

static eyedb::StructClass *Time_make(eyedb::StructClass *Time_class = 0, eyedb::Schema *m = 0)
{
  if (!Time_class)
    return new eyedb::StructClass("time", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[4];
  int *dims;

  dims = 0;
  attr[2] = new eyedb::Attribute((m ? m->getClass("long") : eyedb::Int64_Class), "usecs", eyedb::False, 0, dims);

  dims = 0;
  attr[3] = new eyedb::Attribute((m ? m->getClass("short") : eyedb::Int16_Class), "tz", eyedb::False, 0, dims);

  Time_class->setAttributes(&attr[2], 2);

  delete attr[2];
  delete attr[3];

  eyedb::ClassPeer::setMType(Time_class, eyedb::Class::System);

  return Time_class;
}

eyedb::Object *Time_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new Time(cls, idr);
}

eyedb::Object *Time_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new Time((const eyedb::Struct *)o, share);
}

static void Time_init_p()
{
  Time_Class = Time_make();
  constructors_x[class_ind] = Time_construct_x;
  constructors[class_ind] = Time_construct;
  hash->insert("time", class_ind++);
}

static void Time_init()
{
  Time_make(Time_Class);

  Time_agritems = Time_Class->getAttributes();
  Time_idr_objsz = Time_Class->getIDRObjectSize(&Time_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(Time_Class, eyedb::True);
}

static eyedb::Status Time_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "get_local_time_zone", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "gmt_time", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "local_time", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time");
  comp = new eyedb::FEMethod_C(db, cls, "time", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4100, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4100, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time");
  sign->setNargs(4);
  sign->setTypesCount(4);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time");
  sign->setNargs(5);
  sign->setTypesCount(5);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(4);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time");
  sign->setNargs(6);
  sign->setTypesCount(6);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(4);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(5);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time");
  sign->setNargs(7);
  sign->setTypesCount(7);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(4);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(5);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(6);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8196, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "usec_time", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "hour", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "minute", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "second", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "millisecond", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "tz_hour", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "tz_minute", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "toString", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time");
  comp = new eyedb::FEMethod_C(db, cls, "is_equal", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time");
  comp = new eyedb::FEMethod_C(db, cls, "is_greater", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time");
  comp = new eyedb::FEMethod_C(db, cls, "is_greater_or_equal", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time");
  comp = new eyedb::FEMethod_C(db, cls, "is_less", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time");
  comp = new eyedb::FEMethod_C(db, cls, "is_less_or_equal", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time");
  comp = new eyedb::FEMethod_C(db, cls, "is_between", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_interval");
  comp = new eyedb::FEMethod_C(db, cls, "add_interval", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_interval");
  comp = new eyedb::FEMethod_C(db, cls, "substract_interval", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time");
  comp = new eyedb::FEMethod_C(db, cls, "substract_time", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "gmt_hour", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "gmt_minute", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "microsecond", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4100, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "set_usecs", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return eyedb::Success;
}

static eyedb::Status Time_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

Time::Time(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

Time::Time(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void Time::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("time") : Time_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

Time::Time(const Time& x) : eyedb::Struct(x)
{
  userCopy(x);
}

Time& Time::operator=(const Time& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

Time::Time(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("time") : Time_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

Time::Time(const Time *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("time") : Time_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

eyedb::Status Time::setUsecs(eyedblib::int64 _usecs)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)&_usecs, 1, 0);
  return status;
}

eyedblib::int64 Time::getUsecs(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int64 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status Time::setTz(eyedblib::int16 _tz)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[3]->setValue(this, (eyedb::Data)&_tz, 1, 0);
  return status;
}

eyedblib::int16 Time::getTz(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int16 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[3]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const eyedb::Attribute **TimeStamp_agritems;
static eyedb::Size TimeStamp_idr_objsz, TimeStamp_idr_psize;

static eyedb::StructClass *TimeStamp_make(eyedb::StructClass *TimeStamp_class = 0, eyedb::Schema *m = 0)
{
  if (!TimeStamp_class)
    return new eyedb::StructClass("time_stamp", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[4];
  int *dims;

  dims = 0;
  attr[2] = new eyedb::Attribute((m ? m->getClass("long") : eyedb::Int64_Class), "usecs", eyedb::False, 0, dims);

  dims = 0;
  attr[3] = new eyedb::Attribute((m ? m->getClass("short") : eyedb::Int16_Class), "tz", eyedb::False, 0, dims);

  TimeStamp_class->setAttributes(&attr[2], 2);

  delete attr[2];
  delete attr[3];

  eyedb::ClassPeer::setMType(TimeStamp_class, eyedb::Class::System);

  return TimeStamp_class;
}

eyedb::Object *TimeStamp_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new TimeStamp(cls, idr);
}

eyedb::Object *TimeStamp_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new TimeStamp((const eyedb::Struct *)o, share);
}

static void TimeStamp_init_p()
{
  TimeStamp_Class = TimeStamp_make();
  constructors_x[class_ind] = TimeStamp_construct_x;
  constructors[class_ind] = TimeStamp_construct;
  hash->insert("time_stamp", class_ind++);
}

static void TimeStamp_init()
{
  TimeStamp_make(TimeStamp_Class);

  TimeStamp_agritems = TimeStamp_Class->getAttributes();
  TimeStamp_idr_objsz = TimeStamp_Class->getIDRObjectSize(&TimeStamp_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(TimeStamp_Class, eyedb::True);
}

static eyedb::Status TimeStamp_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_stamp");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "gmt_time_stamp", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_stamp");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "local_time_stamp", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_stamp");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_stamp");
  comp = new eyedb::FEMethod_C(db, cls, "time_stamp", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_stamp");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4100, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time_stamp", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_stamp");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4100, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time_stamp", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_stamp");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4100, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time_stamp", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_stamp");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4100, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time_stamp", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_stamp");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("date");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time");
  comp = new eyedb::FEMethod_C(db, cls, "time_stamp", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_stamp");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("date");
  comp = new eyedb::FEMethod_C(db, cls, "time_stamp", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_stamp");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("date");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time_stamp", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_stamp");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time_stamp", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8196, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "usec_time_stamp", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("date");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "date", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "time", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "year", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "month", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "day", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "hour", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "minute", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "second", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "millisecond", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "tz_hour", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "tz_minute", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "toString", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_stamp");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_interval");
  comp = new eyedb::FEMethod_C(db, cls, "plus", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_stamp");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_interval");
  comp = new eyedb::FEMethod_C(db, cls, "minus", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_stamp");
  comp = new eyedb::FEMethod_C(db, cls, "is_equal", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_stamp");
  comp = new eyedb::FEMethod_C(db, cls, "is_greater", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_stamp");
  comp = new eyedb::FEMethod_C(db, cls, "is_greater_or_equal", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_stamp");
  comp = new eyedb::FEMethod_C(db, cls, "is_less", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_stamp");
  comp = new eyedb::FEMethod_C(db, cls, "is_less_or_equal", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_stamp");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_stamp");
  comp = new eyedb::FEMethod_C(db, cls, "is_between", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "gmt_hour", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "gmt_minute", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "microsecond", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4100, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "set_usecs", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_stamp");
  comp = new eyedb::FEMethod_C(db, cls, "substract", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return eyedb::Success;
}

static eyedb::Status TimeStamp_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

TimeStamp::TimeStamp(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

TimeStamp::TimeStamp(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void TimeStamp::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("time_stamp") : TimeStamp_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

TimeStamp::TimeStamp(const TimeStamp& x) : eyedb::Struct(x)
{
  userCopy(x);
}

TimeStamp& TimeStamp::operator=(const TimeStamp& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

TimeStamp::TimeStamp(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("time_stamp") : TimeStamp_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

TimeStamp::TimeStamp(const TimeStamp *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("time_stamp") : TimeStamp_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

eyedb::Status TimeStamp::setUsecs(eyedblib::int64 _usecs)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)&_usecs, 1, 0);
  return status;
}

eyedblib::int64 TimeStamp::getUsecs(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int64 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status TimeStamp::setTz(eyedblib::int16 _tz)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[3]->setValue(this, (eyedb::Data)&_tz, 1, 0);
  return status;
}

eyedblib::int16 TimeStamp::getTz(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int16 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[3]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const eyedb::Attribute **TimeInterval_agritems;
static eyedb::Size TimeInterval_idr_objsz, TimeInterval_idr_psize;

static eyedb::StructClass *TimeInterval_make(eyedb::StructClass *TimeInterval_class = 0, eyedb::Schema *m = 0)
{
  if (!TimeInterval_class)
    return new eyedb::StructClass("time_interval", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[3];
  int *dims;

  dims = 0;
  attr[2] = new eyedb::Attribute((m ? m->getClass("long") : eyedb::Int64_Class), "usecs", eyedb::False, 0, dims);

  TimeInterval_class->setAttributes(&attr[2], 1);

  delete attr[2];

  eyedb::ClassPeer::setMType(TimeInterval_class, eyedb::Class::System);

  return TimeInterval_class;
}

eyedb::Object *TimeInterval_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new TimeInterval(cls, idr);
}

eyedb::Object *TimeInterval_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new TimeInterval((const eyedb::Struct *)o, share);
}

static void TimeInterval_init_p()
{
  TimeInterval_Class = TimeInterval_make();
  constructors_x[class_ind] = TimeInterval_construct_x;
  constructors[class_ind] = TimeInterval_construct;
  hash->insert("time_interval", class_ind++);
}

static void TimeInterval_init()
{
  TimeInterval_make(TimeInterval_Class);

  TimeInterval_agritems = TimeInterval_Class->getAttributes();
  TimeInterval_idr_objsz = TimeInterval_Class->getIDRObjectSize(&TimeInterval_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(TimeInterval_Class, eyedb::True);
}

static eyedb::Status TimeInterval_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4100, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time_interval", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_interval");
  sign->setNargs(6);
  sign->setTypesCount(6);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(4);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(5);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "time_interval", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "day", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "hour", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "minute", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "second", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "millisecond", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "microsecond", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "is_zero", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "toString", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_interval");
  comp = new eyedb::FEMethod_C(db, cls, "plus", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_interval");
  comp = new eyedb::FEMethod_C(db, cls, "minus", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4100, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "product", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("time_interval");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4100, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "quotient", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_interval");
  comp = new eyedb::FEMethod_C(db, cls, "is_equal", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_interval");
  comp = new eyedb::FEMethod_C(db, cls, "is_greater", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_interval");
  comp = new eyedb::FEMethod_C(db, cls, "is_greater_or_equal", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_interval");
  comp = new eyedb::FEMethod_C(db, cls, "is_less", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8194, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("time_interval");
  comp = new eyedb::FEMethod_C(db, cls, "is_less_or_equal", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4100, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "set_usecs", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return eyedb::Success;
}

static eyedb::Status TimeInterval_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

TimeInterval::TimeInterval(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

TimeInterval::TimeInterval(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void TimeInterval::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("time_interval") : TimeInterval_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

TimeInterval::TimeInterval(const TimeInterval& x) : eyedb::Struct(x)
{
  userCopy(x);
}

TimeInterval& TimeInterval::operator=(const TimeInterval& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

TimeInterval::TimeInterval(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("time_interval") : TimeInterval_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

TimeInterval::TimeInterval(const TimeInterval *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("time_interval") : TimeInterval_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

eyedb::Status TimeInterval::setUsecs(eyedblib::int64 _usecs)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)&_usecs, 1, 0);
  return status;
}

eyedblib::int64 TimeInterval::getUsecs(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int64 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const eyedb::Attribute **OString_agritems;
static eyedb::Size OString_idr_objsz, OString_idr_psize;

static eyedb::StructClass *OString_make(eyedb::StructClass *OString_class = 0, eyedb::Schema *m = 0)
{
  if (!OString_class)
    return new eyedb::StructClass("ostring", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[3];
  int *dims;

  dims = new int[1];
  dims[0] = -1;
  attr[2] = new eyedb::Attribute((m ? m->getClass("char") : eyedb::Char_Class), "s", eyedb::False, 1, dims);
  delete[] dims;

  OString_class->setAttributes(&attr[2], 1);

  delete attr[2];

  eyedb::ClassPeer::setMType(OString_class, eyedb::Class::System);

  return OString_class;
}

eyedb::Object *OString_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new OString(cls, idr);
}

eyedb::Object *OString_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new OString((const eyedb::Struct *)o, share);
}

static void OString_init_p()
{
  OString_Class = OString_make();
  constructors_x[class_ind] = OString_construct_x;
  constructors[class_ind] = OString_construct;
  hash->insert("ostring", class_ind++);
}

static void OString_init()
{
  OString_make(OString_Class);

  OString_agritems = OString_Class->getAttributes();
  OString_idr_objsz = OString_Class->getIDRObjectSize(&OString_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OString_Class, eyedb::True);
}

static eyedb::Status OString_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "ostring", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "ostring", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "ostring", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "ostring", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("ostring");
  comp = new eyedb::FEMethod_C(db, cls, "ostring", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4102, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "ostring", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "ostring", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "ostring", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "strlen", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "strcmp", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "strstr", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "substr", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "toLower", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "toUpper", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "rtrim", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "ltrim", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "concat", sign, eyedb::True, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4102, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::BEMethod_OQL(db, cls, "setChar", sign, eyedb::False, eyedb::True, "{     this.s[offset] := c;   }");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8198, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::BEMethod_OQL(db, cls, "getChar", sign, eyedb::False, eyedb::True, "{     return this.s[offset];   }");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "append", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "append", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "append", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "prepend", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "prepend", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "prepend", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "insert", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "insert", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(4);
  sign->setTypesCount(4);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "insert", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "first", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "last", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "find", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "substr", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "substr", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "erase", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "replace", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(4);
  sign->setTypesCount(4);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "replace", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(5);
  sign->setTypesCount(5);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(4);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "replace", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "replace", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "reset", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::BEMethod_OQL(db, cls, "assign", sign, eyedb::False, eyedb::True, "{  this->s := s;  return this;   }");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "assign", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "assign", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "toLower", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "toUpper", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "rtrim", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("ostring");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "ltrim", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "compare", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "compare", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "compare", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "is_null", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "match", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "length", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8453, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "split", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8453, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "regexp_split", sign, eyedb::False, eyedb::True, "utilsmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return eyedb::Success;
}

static eyedb::Status OString_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

OString::OString(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

OString::OString(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void OString::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("ostring") : OString_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

OString::OString(const OString& x) : eyedb::Struct(x)
{
  userCopy(x);
}

OString& OString::operator=(const OString& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

OString::OString(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("ostring") : OString_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

OString::OString(const OString *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("ostring") : OString_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

eyedb::Status OString::setS(const std::string &_s)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size size;
  eyedb::Size len = _s.size() + 1;

  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[2]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)_s.c_str(), len, 0);
  return status;

}

eyedb::Status OString::setS(unsigned int a0, char _s)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[2]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)&_s, 1, from);
  return status;
}

std::string OString::getS(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Data data;
  eyedb::Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&data, eyedb::Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char OString::getS(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const char not_exit_msg[] = "class does not exist";
static const char differ_msg[] = "class differs in database and in runtime environment";

void utilsInit(void)
{
  if (hash) return;

  hash = new eyedb::GenHashTable(0, 104);

  ImageType_init_p();
  Month_init_p();
  Weekday_init_p();
  Image_init_p();
  CURL_init_p();
  WConfig_init_p();
  Date_init_p();
  Time_init_p();
  TimeStamp_init_p();
  TimeInterval_init_p();
  OString_init_p();
  ImageType_init();
  Month_init();
  Weekday_init();
  Image_init();
  CURL_init();
  WConfig_init();
  Date_init();
  Time_init();
  TimeStamp_init();
  TimeInterval_init();
  OString_init();
}

void utilsRelease(void)
{
  if (!hash) return;

  delete hash;
  hash = 0;

  ImageType_Class->release();
  Month_Class->release();
  Weekday_Class->release();
  Image_Class->release();
  CURL_Class->release();
  WConfig_Class->release();
  Date_Class->release();
  Time_Class->release();
  TimeStamp_Class->release();
  TimeInterval_Class->release();
  OString_Class->release();
}

static eyedb::Status
utilsSchemaUpdate(eyedb::Schema *m, eyedb::Database *db)
{
  m->setName("eyedb");
  eyedb::Status status;
  eyedb::EnumClass *ImageType_class = ImageType_make(0, m);
  if (!m->getClass("image_type"))
    {
      status = m->addClass(ImageType_class);
      if (status)
        return status;
    }
  eyedb::EnumClass *Month_class = Month_make(0, m);
  if (!m->getClass("month"))
    {
      status = m->addClass(Month_class);
      if (status)
        return status;
    }
  eyedb::EnumClass *Weekday_class = Weekday_make(0, m);
  if (!m->getClass("weekday"))
    {
      status = m->addClass(Weekday_class);
      if (status)
        return status;
    }
  eyedb::StructClass *Image_class = Image_make(0, m);
  if (!m->getClass("image"))
    {
      status = m->addClass(Image_class);
      if (status)
        return status;
    }
  eyedb::StructClass *CURL_class = CURL_make(0, m);
  if (!m->getClass("URL"))
    {
      status = m->addClass(CURL_class);
      if (status)
        return status;
    }
  eyedb::StructClass *WConfig_class = WConfig_make(0, m);
  if (!m->getClass("w_config"))
    {
      status = m->addClass(WConfig_class);
      if (status)
        return status;
    }
  eyedb::StructClass *Date_class = Date_make(0, m);
  if (!m->getClass("date"))
    {
      status = m->addClass(Date_class);
      if (status)
        return status;
    }
  eyedb::StructClass *Time_class = Time_make(0, m);
  if (!m->getClass("time"))
    {
      status = m->addClass(Time_class);
      if (status)
        return status;
    }
  eyedb::StructClass *TimeStamp_class = TimeStamp_make(0, m);
  if (!m->getClass("time_stamp"))
    {
      status = m->addClass(TimeStamp_class);
      if (status)
        return status;
    }
  eyedb::StructClass *TimeInterval_class = TimeInterval_make(0, m);
  if (!m->getClass("time_interval"))
    {
      status = m->addClass(TimeInterval_class);
      if (status)
        return status;
    }
  eyedb::StructClass *OString_class = OString_make(0, m);
  if (!m->getClass("ostring"))
    {
      status = m->addClass(OString_class);
      if (status)
        return status;
    }

  ImageType_make(ImageType_class, m);
  Month_make(Month_class, m);
  Weekday_make(Weekday_class, m);
  Image_make(Image_class, m);
  CURL_make(CURL_class, m);
  WConfig_make(WConfig_class, m);
  Date_make(Date_class, m);
  Time_make(Time_class, m);
  TimeStamp_make(TimeStamp_class, m);
  TimeInterval_make(TimeInterval_class, m);
  OString_make(OString_class, m);

  if (!db) return eyedb::Success;

  if (!ImageType_class->compare(m->getClass("image_type")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'ImageType' %s", differ_msg);
  if (!Month_class->compare(m->getClass("month")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'Month' %s", differ_msg);
  if (!Weekday_class->compare(m->getClass("weekday")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'Weekday' %s", differ_msg);
  if (!Image_class->compare(m->getClass("image")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'Image' %s", differ_msg);
  if (!CURL_class->compare(m->getClass("URL")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'CURL' %s", differ_msg);
  if (!WConfig_class->compare(m->getClass("w_config")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'WConfig' %s", differ_msg);
  if (!Date_class->compare(m->getClass("date")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'Date' %s", differ_msg);
  if (!Time_class->compare(m->getClass("time")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'Time' %s", differ_msg);
  if (!TimeStamp_class->compare(m->getClass("time_stamp")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'TimeStamp' %s", differ_msg);
  if (!TimeInterval_class->compare(m->getClass("time_interval")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'TimeInterval' %s", differ_msg);
  if (!OString_class->compare(m->getClass("ostring")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OString' %s", differ_msg);

  db->transactionBegin();

  if ((status = Date_comp_realize(db, m->getClass("date")))) return status;

  if ((status = Time_comp_realize(db, m->getClass("time")))) return status;

  if ((status = TimeStamp_comp_realize(db, m->getClass("time_stamp")))) return status;

  if ((status = TimeInterval_comp_realize(db, m->getClass("time_interval")))) return status;

  if ((status = OString_comp_realize(db, m->getClass("ostring")))) return status;

  if ((status = Image_attrcomp_realize(db, m->getClass("image")))) return status;

  if ((status = CURL_attrcomp_realize(db, m->getClass("URL")))) return status;

  if ((status = WConfig_attrcomp_realize(db, m->getClass("w_config")))) return status;

  if ((status = Date_attrcomp_realize(db, m->getClass("date")))) return status;

  if ((status = Time_attrcomp_realize(db, m->getClass("time")))) return status;

  if ((status = TimeStamp_attrcomp_realize(db, m->getClass("time_stamp")))) return status;

  if ((status = TimeInterval_attrcomp_realize(db, m->getClass("time_interval")))) return status;

  if ((status = OString_attrcomp_realize(db, m->getClass("ostring")))) return status;
  status = m->realize();
  if (status) return status;
  db->transactionCommit();
  return eyedb::Success;
}

eyedb::Status utilsSchemaUpdate(eyedb::Database *db)
{
  return utilsSchemaUpdate(db->getSchema(), db);
}

eyedb::Status utilsSchemaUpdate(eyedb::Schema *m)
{
  return utilsSchemaUpdate(m, NULL);
}

eyedb::Object *utilsMakeObject(eyedb::Object *o, eyedb::Bool remove)
{
  if (!o->getClass()) return (eyedb::Object *)0;
  if (eyedb::ObjectPeer::isGRTObject(o))
    return o;
  int ind = hash->get(o->getClass()->getName());
  if (ind < 0 && (!o->getClass()->getStrictAliasName() || (ind = hash->get(o->getClass()->getStrictAliasName())) < 0)) return 0;
  eyedb::Object *co = constructors[ind](o, (remove ? eyedb::True : eyedb::False));
  eyedb::ObjectPeer::setClass(co, o->getClass());
  if (remove) o->release();
  if (co->getDatabase())
    co->getDatabase()->cacheObject(co);
  return co;
}

utilsDatabase::utilsDatabase(eyedb::Connection *conn, const char *dbname, eyedb::Database::OpenFlag flag, const char *userauth, const char *passwdauth) : eyedb::Database(dbname)
{
  eyedb::Status status = open(conn, flag, 0, userauth, passwdauth);
  if (status) throw *status;
}

utilsDatabase::utilsDatabase(eyedb::Connection *conn, const char *dbname, const char *dbmdb_str, eyedb::Database::OpenFlag flag, const char *userauth, const char *passwdauth) : eyedb::Database(dbname, dbmdb_str)
{
  eyedb::Status status = open(conn, flag, 0, userauth, passwdauth);
  if (status) throw *status;
}

eyedb::Status utilsDatabase::open(eyedb::Connection *conn, eyedb::Database::OpenFlag flag, const char *userauth, const char *passwdauth)
{
  return open(conn, flag, 0, userauth, passwdauth);
}

eyedb::Status utilsDatabase::open(eyedb::Connection *conn, eyedb::Database::OpenFlag flag, const eyedb::OpenHints *hints, const char *userauth, const char *passwdauth)
{
  eyedb::Status status = eyedb::Database::open(conn, flag, hints, userauth, passwdauth);
  if (status) return status;
  transactionBegin();
  status = utilsDatabase::checkSchema(getSchema());
  transactionCommit();

  if (!status) add(hash, constructors_x);

  return status;
}

void utilsDatabase::setConsApp(eyedb::Database *_db)
{
  _db->add(hash, constructors_x);
}

static void append(char *&s, const char *m1, const char *m2)
{
  if (!s) {s = (char *)malloc(strlen(m1)+strlen(m2)+2); *s = 0;}
  else s = (char *)realloc(s, strlen(s)+strlen(m1)+strlen(m2)+2);
  strcat(s, m1);
  strcat(s, m2);
  strcat(s, "\n");
}

eyedb::Bool utilsDatabase::getDynamicGetErrorPolicy() {
   throw *eyedb::Exception::make(eyedb::IDB_ERROR, "getDynamicGetErrorPolicy() can be called only when the dynamic attribute fonctionnality is on (-dynamic-attr option of eyedbodl)");
}

eyedb::Bool utilsDatabase::getDynamicSetErrorPolicy() {
   throw *eyedb::Exception::make(eyedb::IDB_ERROR, "getDynamicSetErrorPolicy() can be called only when the dynamic attribute fonctionnality is on (-dynamic-attr option of eyedbodl)");
}

void utilsDatabase::setDynamicGetErrorPolicy(eyedb::Bool policy) {
   throw *eyedb::Exception::make(eyedb::IDB_ERROR, "setDynamicGetErrorPolicy() can be called only when the dynamic attribute fonctionnality is on (-dynamic-attr option of eyedbodl)");
}

void utilsDatabase::setDynamicSetErrorPolicy(eyedb::Bool policy) {
   throw *eyedb::Exception::make(eyedb::IDB_ERROR, "setDynamicSetErrorPolicy() can be called only when the dynamic attribute fonctionnality is on (-dynamic-attr option of eyedbodl)");
}

eyedb::Status utilsDatabase::checkSchema(eyedb::Schema *m)
{
  eyedb::Class *cl;
  char *s = 0;

  if (!(cl = m->getClass("image_type")))
    append(s, "'image_type' ", not_exit_msg);
  else if (!ImageType_Class->compare(cl))
    append(s, "'ImageType' ", differ_msg);
  if (!(cl = m->getClass("month")))
    append(s, "'month' ", not_exit_msg);
  else if (!Month_Class->compare(cl))
    append(s, "'Month' ", differ_msg);
  if (!(cl = m->getClass("weekday")))
    append(s, "'weekday' ", not_exit_msg);
  else if (!Weekday_Class->compare(cl))
    append(s, "'Weekday' ", differ_msg);
  if (!(cl = m->getClass("image")))
    append(s, "'image' ", not_exit_msg);
  else if (!Image_Class->compare(cl))
    append(s, "'Image' ", differ_msg);
  if (!(cl = m->getClass("URL")))
    append(s, "'URL' ", not_exit_msg);
  else if (!CURL_Class->compare(cl))
    append(s, "'CURL' ", differ_msg);
  if (!(cl = m->getClass("w_config")))
    append(s, "'w_config' ", not_exit_msg);
  else if (!WConfig_Class->compare(cl))
    append(s, "'WConfig' ", differ_msg);
  if (!(cl = m->getClass("date")))
    append(s, "'date' ", not_exit_msg);
  else if (!Date_Class->compare(cl))
    append(s, "'Date' ", differ_msg);
  if (!(cl = m->getClass("time")))
    append(s, "'time' ", not_exit_msg);
  else if (!Time_Class->compare(cl))
    append(s, "'Time' ", differ_msg);
  if (!(cl = m->getClass("time_stamp")))
    append(s, "'time_stamp' ", not_exit_msg);
  else if (!TimeStamp_Class->compare(cl))
    append(s, "'TimeStamp' ", differ_msg);
  if (!(cl = m->getClass("time_interval")))
    append(s, "'time_interval' ", not_exit_msg);
  else if (!TimeInterval_Class->compare(cl))
    append(s, "'TimeInterval' ", differ_msg);
  if (!(cl = m->getClass("ostring")))
    append(s, "'ostring' ", not_exit_msg);
  else if (!OString_Class->compare(cl))
    append(s, "'OString' ", differ_msg);
  if (s) {eyedb::Status status = eyedb::Exception::make(s); free(s); return status;}
  return eyedb::Success;
}

eyedb::Bool utils_set_oid_check(eyedb::Bool _oid_check)
{
  eyedb::Bool old = oid_check;
  oid_check = _oid_check;
  return old;
}

eyedb::Bool utils_get_oid_check()
{
  return oid_check;
}

}
