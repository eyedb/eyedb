
/*
 * EyeDB Version 2.8.8 Copyright (c) 1995-2006 SYSRA
 *
 * File 'oqlctb.h'
 *
 * Package Name 'oqlctb'
 *
 * Generated by eyedbodl at Sun Nov 15 16:38:33 2009
 *
 * ---------------------------------------------------
 * -------------- DO NOT EDIT THIS CODE --------------
 * ---------------------------------------------------
 *
 */

#include <eyedb/eyedb.h>

#ifndef _eyedb_oqlctb_
#define _eyedb_oqlctb_

namespace eyedb {

class OqlCtbDatafile;
class OqlCtbDataspace;
class OqlCtbEyedb;
class OqlCtbConnection;
class OqlCtbDatabase;
class OqlCtbMath;
class oql;


class oqlctb {

 public:
  oqlctb(int &argc, char *argv[]) {
    eyedb::init(argc, argv);
    init();
  }

  ~oqlctb() {
    release();
    eyedb::release();
  }

  static void init();
  static void release();
  static eyedb::Status updateSchema(eyedb::Database *db);
  static eyedb::Status updateSchema(eyedb::Schema *m);
};

class oqlctbDatabase : public eyedb::Database {

 public:
  oqlctbDatabase(const char *dbname, const char *_dbmdb_str = 0) : eyedb::Database(dbname, _dbmdb_str) {}
  oqlctbDatabase(eyedb::Connection *conn, const char *dbname, const char *_dbmdb_str, eyedb::Database::OpenFlag, const char *user = 0, const char *passwd = 0);
  oqlctbDatabase(eyedb::Connection *conn, const char *dbname, eyedb::Database::OpenFlag, const char *user = 0, const char *passwd = 0);
  oqlctbDatabase(const char *dbname, int _dbid, const char *_dbmdb_str = 0) : eyedb::Database(dbname, _dbid, _dbmdb_str) {}
  oqlctbDatabase(int _dbid, const char *_dbmdb_str = 0) : eyedb::Database(_dbid, _dbmdb_str) {}
  eyedb::Status open(eyedb::Connection *, eyedb::Database::OpenFlag, const char *user = 0, const char *passwd = 0);
  eyedb::Status open(eyedb::Connection *, eyedb::Database::OpenFlag, const eyedb::OpenHints *hints, const char *user = 0, const char *passwd = 0);
  static void setConsApp(eyedb::Database *);
  static eyedb::Status checkSchema(eyedb::Schema *);
  static eyedb::Bool getDynamicGetErrorPolicy();
  static eyedb::Bool getDynamicSetErrorPolicy();
  static void setDynamicGetErrorPolicy(eyedb::Bool policy);
  static void setDynamicSetErrorPolicy(eyedb::Bool policy);
};

class OqlCtbDatabaseOpenMode {

public:
  enum Type {
    DBRead = 2,
    DBRW = 4,
    DBAdmin = 16,
    DBOpenLocal = 32
  };
};

class OqlCtbLockMode {

public:
  enum Type {
    DefaultLock = 0,
    LockN = 1,
    LockX = 2,
    LockSX = 3,
    LockS = 4,
    LockP = 5
  };
};

class OqlCtbTransactionMode {

public:
  enum Type {
    TransactionOff = 1,
    TransactionOn = 2
  };
};

class OqlCtbTransactionLockMode {

public:
  enum Type {
    ReadSWriteS = 1,
    ReadSWriteSX = 2,
    ReadSWriteX = 3,
    ReadSXWriteSX = 4,
    ReadSXWriteX = 5,
    ReadXWriteX = 6,
    ReadNWriteS = 7,
    ReadNWriteSX = 8,
    ReadNWriteX = 9,
    ReadNWriteN = 10,
    DatabaseX = 11
  };
};

class OqlCtbRecoveryMode {

public:
  enum Type {
    RecoveryOff = 3,
    RecoveryPartial = 4,
    RecoveryFull = 5
  };
};

class OqlCtbToStringFlags {

public:
  enum Type {
    MTimeTrace = 1,
    CTimeTrace = 2,
    CMTimeTrace = 3,
    PointerTrace = 4,
    CompOidTrace = 8,
    NativeTrace = 16,
    ContentsTrace = 32,
    InhAttrTrace = 64,
    InhExecTrace = 128,
    ExecBodyTrace = 256,
    SysExecTrace = 512,
    NoScopeTrace = 1024,
    FullRecursTrace = 4096
  };
};

class OqlCtbMapType {

public:
  enum Type {
    BitmapType = 0,
    LinkmapType = 1
  };
};

class OqlCtbDatType {

public:
  enum Type {
    LogicalOidType = 256,
    PhysicalOidType = 257
  };
};

class OqlCtbDatafile : public eyedb::Struct {

 public:
  OqlCtbDatafile(eyedb::Database * = 0, const eyedb::Dataspace * = 0);
  OqlCtbDatafile(const OqlCtbDatafile& x);

  virtual eyedb::Object *clone() const {return new OqlCtbDatafile(*this);};

  OqlCtbDatafile& operator=(const OqlCtbDatafile& x);

  virtual OqlCtbDatafile *asOqlCtbDatafile() {return this;}
  virtual const OqlCtbDatafile *asOqlCtbDatafile() const {return this;}

  eyedb::Status setId(eyedblib::int16 );
  eyedblib::int16 getId(eyedb::Bool *isnull = 0, eyedb::Status * = 0)  const;

  eyedb::Status setDspid(eyedblib::int16 );
  eyedblib::int16 getDspid(eyedb::Bool *isnull = 0, eyedb::Status * = 0)  const;

  eyedb::Status setDsp(OqlCtbDataspace*);
  OqlCtbDataspace*getDsp(eyedb::Bool *isnull = 0, eyedb::Status * = 0) ;
  const OqlCtbDataspace*getDsp(eyedb::Bool *isnull = 0, eyedb::Status * = 0) const;
  eyedb::Oid getDspOid(eyedb::Status * = 0) const;
  eyedb::Status setDspOid(const eyedb::Oid &);

  eyedb::Status setFile(const std::string &);
  eyedb::Status setFile(unsigned int a0, char );
  std::string getFile(eyedb::Bool *isnull = 0, eyedb::Status * = 0) const;
  char getFile(unsigned int a0, eyedb::Bool *isnull = 0, eyedb::Status * = 0)  const;

  eyedb::Status setName(const std::string &);
  eyedb::Status setName(unsigned int a0, char );
  std::string getName(eyedb::Bool *isnull = 0, eyedb::Status * = 0) const;
  char getName(unsigned int a0, eyedb::Bool *isnull = 0, eyedb::Status * = 0)  const;

  eyedb::Status setMtype(OqlCtbMapType::Type , eyedb::Bool _check_value = eyedb::True);
  OqlCtbMapType::Type getMtype(eyedb::Bool *isnull = 0, eyedb::Status * = 0)  const;

  eyedb::Status setMaxsize(eyedblib::int32 );
  eyedblib::int32 getMaxsize(eyedb::Bool *isnull = 0, eyedb::Status * = 0)  const;

  eyedb::Status setSlotsize(eyedblib::int32 );
  eyedblib::int32 getSlotsize(eyedb::Bool *isnull = 0, eyedb::Status * = 0)  const;

  eyedb::Status setDtype(OqlCtbDatType::Type , eyedb::Bool _check_value = eyedb::True);
  OqlCtbDatType::Type getDtype(eyedb::Bool *isnull = 0, eyedb::Status * = 0)  const;
  virtual ~OqlCtbDatafile() {garbageRealize();}
  // OqlCtbDatafile User Part

    Datafile *xdatfile;
    virtual void userInitialize();
    virtual void userCopy(const Object &);
  

 protected:
  OqlCtbDatafile(eyedb::Database *_db, const eyedb::Dataspace *_dataspace, int) : eyedb::Struct(_db, _dataspace) {}
  OqlCtbDatafile(const eyedb::Struct *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}
  OqlCtbDatafile(const OqlCtbDatafile *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}

 private:
  void initialize(eyedb::Database *_db);

 public: /* restricted */
  OqlCtbDatafile(const eyedb::Struct *, eyedb::Bool = eyedb::False);
  OqlCtbDatafile(const OqlCtbDatafile *, eyedb::Bool = eyedb::False);
  OqlCtbDatafile(const eyedb::Class *, eyedb::Data);
};

class OqlCtbDataspace : public eyedb::Struct {

 public:
  OqlCtbDataspace(eyedb::Database * = 0, const eyedb::Dataspace * = 0);
  OqlCtbDataspace(const OqlCtbDataspace& x);

  virtual eyedb::Object *clone() const {return new OqlCtbDataspace(*this);};

  OqlCtbDataspace& operator=(const OqlCtbDataspace& x);

  virtual OqlCtbDataspace *asOqlCtbDataspace() {return this;}
  virtual const OqlCtbDataspace *asOqlCtbDataspace() const {return this;}

  eyedb::Status setId(eyedblib::int16 );
  eyedblib::int16 getId(eyedb::Bool *isnull = 0, eyedb::Status * = 0)  const;

  eyedb::Status setName(const std::string &);
  eyedb::Status setName(unsigned int a0, char );
  std::string getName(eyedb::Bool *isnull = 0, eyedb::Status * = 0) const;
  char getName(unsigned int a0, eyedb::Bool *isnull = 0, eyedb::Status * = 0)  const;

  eyedb::Status setDatafiles(unsigned int a0, OqlCtbDatafile*);
  eyedb::Status setDatafilesCount(unsigned int a0);
  OqlCtbDatafile*getDatafiles(unsigned int a0, eyedb::Bool *isnull = 0, eyedb::Status * = 0) ;
  const OqlCtbDatafile*getDatafiles(unsigned int a0, eyedb::Bool *isnull = 0, eyedb::Status * = 0) const;
  eyedb::Oid getDatafilesOid(unsigned int a0, eyedb::Status * = 0) const;
  eyedb::Status setDatafilesOid(unsigned int a0, const eyedb::Oid &);
  unsigned int getDatafilesCount(eyedb::Status * = 0) const;
  virtual ~OqlCtbDataspace() {garbageRealize();}
  // OqlCtbDataspace User Part

    Dataspace *xdataspace;
    virtual void userInitialize();
    virtual void userCopy(const Object &);
  

 protected:
  OqlCtbDataspace(eyedb::Database *_db, const eyedb::Dataspace *_dataspace, int) : eyedb::Struct(_db, _dataspace) {}
  OqlCtbDataspace(const eyedb::Struct *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}
  OqlCtbDataspace(const OqlCtbDataspace *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}

 private:
  void initialize(eyedb::Database *_db);

 public: /* restricted */
  OqlCtbDataspace(const eyedb::Struct *, eyedb::Bool = eyedb::False);
  OqlCtbDataspace(const OqlCtbDataspace *, eyedb::Bool = eyedb::False);
  OqlCtbDataspace(const eyedb::Class *, eyedb::Data);
};

class OqlCtbEyedb : public eyedb::Struct {

 public:
  OqlCtbEyedb(eyedb::Database * = 0, const eyedb::Dataspace * = 0);
  OqlCtbEyedb(const OqlCtbEyedb& x);

  virtual eyedb::Object *clone() const {return new OqlCtbEyedb(*this);};

  OqlCtbEyedb& operator=(const OqlCtbEyedb& x);

  virtual OqlCtbEyedb *asOqlCtbEyedb() {return this;}
  virtual const OqlCtbEyedb *asOqlCtbEyedb() const {return this;}
  virtual ~OqlCtbEyedb() {garbageRealize();}

 protected:
  OqlCtbEyedb(eyedb::Database *_db, const eyedb::Dataspace *_dataspace, int) : eyedb::Struct(_db, _dataspace) {}
  OqlCtbEyedb(const eyedb::Struct *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}
  OqlCtbEyedb(const OqlCtbEyedb *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}

 private:
  void initialize(eyedb::Database *_db);

 public: /* restricted */
  OqlCtbEyedb(const eyedb::Struct *, eyedb::Bool = eyedb::False);
  OqlCtbEyedb(const OqlCtbEyedb *, eyedb::Bool = eyedb::False);
  OqlCtbEyedb(const eyedb::Class *, eyedb::Data);
};

class OqlCtbConnection : public eyedb::Struct {

 public:
  OqlCtbConnection(eyedb::Database * = 0, const eyedb::Dataspace * = 0);
  OqlCtbConnection(const OqlCtbConnection& x);

  virtual eyedb::Object *clone() const {return new OqlCtbConnection(*this);};

  OqlCtbConnection& operator=(const OqlCtbConnection& x);

  virtual OqlCtbConnection *asOqlCtbConnection() {return this;}
  virtual const OqlCtbConnection *asOqlCtbConnection() const {return this;}
  virtual ~OqlCtbConnection() {garbageRealize();}
  // OqlCtbConnection User Part

    Connection *conn;
    virtual void userInitialize();
    virtual void userCopy(const Object &);
    

 protected:
  OqlCtbConnection(eyedb::Database *_db, const eyedb::Dataspace *_dataspace, int) : eyedb::Struct(_db, _dataspace) {}
  OqlCtbConnection(const eyedb::Struct *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}
  OqlCtbConnection(const OqlCtbConnection *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}

 private:
  void initialize(eyedb::Database *_db);

 public: /* restricted */
  OqlCtbConnection(const eyedb::Struct *, eyedb::Bool = eyedb::False);
  OqlCtbConnection(const OqlCtbConnection *, eyedb::Bool = eyedb::False);
  OqlCtbConnection(const eyedb::Class *, eyedb::Data);
};

class OqlCtbDatabase : public eyedb::Struct {

 public:
  OqlCtbDatabase(eyedb::Database * = 0, const eyedb::Dataspace * = 0);
  OqlCtbDatabase(const OqlCtbDatabase& x);

  virtual eyedb::Object *clone() const {return new OqlCtbDatabase(*this);};

  OqlCtbDatabase& operator=(const OqlCtbDatabase& x);

  virtual OqlCtbDatabase *asOqlCtbDatabase() {return this;}
  virtual const OqlCtbDatabase *asOqlCtbDatabase() const {return this;}

  eyedb::Status setDbname(const std::string &);
  eyedb::Status setDbname(unsigned int a0, char );
  std::string getDbname(eyedb::Bool *isnull = 0, eyedb::Status * = 0) const;
  char getDbname(unsigned int a0, eyedb::Bool *isnull = 0, eyedb::Status * = 0)  const;

  eyedb::Status setDbid(eyedblib::int32 );
  eyedblib::int32 getDbid(eyedb::Bool *isnull = 0, eyedb::Status * = 0)  const;

  eyedb::Status setDbmdb(const std::string &);
  eyedb::Status setDbmdb(unsigned int a0, char );
  std::string getDbmdb(eyedb::Bool *isnull = 0, eyedb::Status * = 0) const;
  char getDbmdb(unsigned int a0, eyedb::Bool *isnull = 0, eyedb::Status * = 0)  const;
  virtual ~OqlCtbDatabase() {garbageRealize();}
  // OqlCtbDatabase User Part

    Database *xdb;
    virtual void userInitialize();
    virtual void userCopy(const Object &);
    

 protected:
  OqlCtbDatabase(eyedb::Database *_db, const eyedb::Dataspace *_dataspace, int) : eyedb::Struct(_db, _dataspace) {}
  OqlCtbDatabase(const eyedb::Struct *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}
  OqlCtbDatabase(const OqlCtbDatabase *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}

 private:
  void initialize(eyedb::Database *_db);

 public: /* restricted */
  OqlCtbDatabase(const eyedb::Struct *, eyedb::Bool = eyedb::False);
  OqlCtbDatabase(const OqlCtbDatabase *, eyedb::Bool = eyedb::False);
  OqlCtbDatabase(const eyedb::Class *, eyedb::Data);
};

class OqlCtbMath : public eyedb::Struct {

 public:
  OqlCtbMath(eyedb::Database * = 0, const eyedb::Dataspace * = 0);
  OqlCtbMath(const OqlCtbMath& x);

  virtual eyedb::Object *clone() const {return new OqlCtbMath(*this);};

  OqlCtbMath& operator=(const OqlCtbMath& x);

  virtual OqlCtbMath *asOqlCtbMath() {return this;}
  virtual const OqlCtbMath *asOqlCtbMath() const {return this;}
  virtual ~OqlCtbMath() {garbageRealize();}

 protected:
  OqlCtbMath(eyedb::Database *_db, const eyedb::Dataspace *_dataspace, int) : eyedb::Struct(_db, _dataspace) {}
  OqlCtbMath(const eyedb::Struct *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}
  OqlCtbMath(const OqlCtbMath *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}

 private:
  void initialize(eyedb::Database *_db);

 public: /* restricted */
  OqlCtbMath(const eyedb::Struct *, eyedb::Bool = eyedb::False);
  OqlCtbMath(const OqlCtbMath *, eyedb::Bool = eyedb::False);
  OqlCtbMath(const eyedb::Class *, eyedb::Data);
};

class oql : public eyedb::Struct {

 public:
  oql(eyedb::Database * = 0, const eyedb::Dataspace * = 0);
  oql(const oql& x);

  virtual eyedb::Object *clone() const {return new oql(*this);};

  oql& operator=(const oql& x);

  virtual oql *asOql() {return this;}
  virtual const oql *asOql() const {return this;}
  virtual ~oql() {garbageRealize();}

 protected:
  oql(eyedb::Database *_db, const eyedb::Dataspace *_dataspace, int) : eyedb::Struct(_db, _dataspace) {}
  oql(const eyedb::Struct *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}
  oql(const oql *x, eyedb::Bool share, int) : eyedb::Struct(x, share) {}

 private:
  void initialize(eyedb::Database *_db);

 public: /* restricted */
  oql(const eyedb::Struct *, eyedb::Bool = eyedb::False);
  oql(const oql *, eyedb::Bool = eyedb::False);
  oql(const eyedb::Class *, eyedb::Data);
};


extern eyedb::Object *oqlctbMakeObject(eyedb::Object *, eyedb::Bool=eyedb::True);
extern eyedb::Bool oqlctb_set_oid_check(eyedb::Bool);
extern eyedb::Bool oqlctb_get_oid_check();


}

#endif
