
/*
 * EyeDB Version 2.8.8 Copyright (c) 1995-2006 SYSRA
 *
 * File 'oqlctb.cc'
 *
 * Package Name 'oqlctb'
 *
 * Generated by eyedbodl at Sun Nov 15 16:38:33 2009
 *
 * ---------------------------------------------------
 * -------------- DO NOT EDIT THIS CODE --------------
 * ---------------------------------------------------
 *
 */

#include <eyedb/eyedb.h>

#include <eyedb/internals/ObjectPeer.h>
#include <eyedb/internals/ClassPeer.h>
#include <eyedb/internals/kern_const.h>

#include "oqlctb.h"

#define min(x,y)((x)<(y)?(x):(y))

namespace eyedb {

static eyedb::Bool dynget_error_policy = eyedb::False;
static eyedb::Bool dynset_error_policy = eyedb::True;
static eyedb::Oid nulloid;
static unsigned char nulldata[1];
static eyedb::Bool oid_check = eyedb::True;
static int class_ind;
static eyedb::Database::consapp_t *constructors_x = new eyedb::Database::consapp_t[108];
static eyedb::Object *(*constructors[108])(const eyedb::Object *, eyedb::Bool);
static eyedb::GenHashTable *hash;
#define make_object oqlctbMakeObject
extern void oqlctbInit(void);
extern void oqlctbRelease(void);
extern eyedb::Status oqlctbSchemaUpdate(eyedb::Database *);
extern eyedb::Status oqlctbSchemaUpdate(eyedb::Schema *);

static eyedb::Class *index_Class = new eyedb::Class("index");

void oqlctb::init()
{
  oqlctbInit();
}

void oqlctb::release()
{
  oqlctbRelease();
}

eyedb::Status oqlctb::updateSchema(eyedb::Database *db)
{
  return oqlctbSchemaUpdate(db);
}

eyedb::Status oqlctb::updateSchema(eyedb::Schema *m)
{
  return oqlctbSchemaUpdate(m);
}

static eyedb::EnumClass *OqlCtbDatabaseOpenMode_Class;
static eyedb::EnumClass *OqlCtbLockMode_Class;
static eyedb::EnumClass *OqlCtbTransactionMode_Class;
static eyedb::EnumClass *OqlCtbTransactionLockMode_Class;
static eyedb::EnumClass *OqlCtbRecoveryMode_Class;
static eyedb::EnumClass *OqlCtbToStringFlags_Class;
static eyedb::EnumClass *OqlCtbMapType_Class;
static eyedb::EnumClass *OqlCtbDatType_Class;
static eyedb::StructClass *OqlCtbDatafile_Class;
static eyedb::StructClass *OqlCtbDataspace_Class;
static eyedb::StructClass *OqlCtbEyedb_Class;
static eyedb::StructClass *OqlCtbConnection_Class;
static eyedb::StructClass *OqlCtbDatabase_Class;
static eyedb::StructClass *OqlCtbMath_Class;
static eyedb::StructClass *oql_Class;

static eyedb::Size OqlCtbDatabaseOpenMode_idr_objsz, OqlCtbDatabaseOpenMode_idr_psize;

static eyedb::EnumClass *OqlCtbDatabaseOpenMode_make(eyedb::EnumClass *OqlCtbDatabaseOpenMode_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbDatabaseOpenMode_class)
    return new eyedb::EnumClass("database_open_mode");
  eyedb::EnumItem *en[4];
  en[0] = new eyedb::EnumItem("DBREAD", "DBRead", (unsigned int)2);
  en[1] = new eyedb::EnumItem("DBRW", "DBRW", (unsigned int)4);
  en[2] = new eyedb::EnumItem("DBADMIN", "DBAdmin", (unsigned int)16);
  en[3] = new eyedb::EnumItem("DBOPENLOCAL", "DBOpenLocal", (unsigned int)32);

  OqlCtbDatabaseOpenMode_class->setEnumItems(en, 4);

  delete en[0];
  delete en[1];
  delete en[2];
  delete en[3];

  eyedb::ClassPeer::setMType(OqlCtbDatabaseOpenMode_class, eyedb::Class::System);

  return OqlCtbDatabaseOpenMode_class;
}

static void OqlCtbDatabaseOpenMode_init_p()
{
  OqlCtbDatabaseOpenMode_Class = OqlCtbDatabaseOpenMode_make();
}

static void OqlCtbDatabaseOpenMode_init()
{
  OqlCtbDatabaseOpenMode_make(OqlCtbDatabaseOpenMode_Class);

  OqlCtbDatabaseOpenMode_idr_objsz = OqlCtbDatabaseOpenMode_Class->getIDRObjectSize(&OqlCtbDatabaseOpenMode_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbDatabaseOpenMode_Class, eyedb::True);
}

static eyedb::Size OqlCtbLockMode_idr_objsz, OqlCtbLockMode_idr_psize;

static eyedb::EnumClass *OqlCtbLockMode_make(eyedb::EnumClass *OqlCtbLockMode_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbLockMode_class)
    return new eyedb::EnumClass("lock_mode");
  eyedb::EnumItem *en[6];
  en[0] = new eyedb::EnumItem("DEFAULT_LOCK", "DefaultLock", (unsigned int)0);
  en[1] = new eyedb::EnumItem("LOCK_N", "LockN", (unsigned int)1);
  en[2] = new eyedb::EnumItem("LOCK_X", "LockX", (unsigned int)2);
  en[3] = new eyedb::EnumItem("LOCK_SX", "LockSX", (unsigned int)3);
  en[4] = new eyedb::EnumItem("LOCK_S", "LockS", (unsigned int)4);
  en[5] = new eyedb::EnumItem("LOCK_P", "LockP", (unsigned int)5);

  OqlCtbLockMode_class->setEnumItems(en, 6);

  delete en[0];
  delete en[1];
  delete en[2];
  delete en[3];
  delete en[4];
  delete en[5];

  eyedb::ClassPeer::setMType(OqlCtbLockMode_class, eyedb::Class::System);

  return OqlCtbLockMode_class;
}

static void OqlCtbLockMode_init_p()
{
  OqlCtbLockMode_Class = OqlCtbLockMode_make();
}

static void OqlCtbLockMode_init()
{
  OqlCtbLockMode_make(OqlCtbLockMode_Class);

  OqlCtbLockMode_idr_objsz = OqlCtbLockMode_Class->getIDRObjectSize(&OqlCtbLockMode_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbLockMode_Class, eyedb::True);
}

static eyedb::Size OqlCtbTransactionMode_idr_objsz, OqlCtbTransactionMode_idr_psize;

static eyedb::EnumClass *OqlCtbTransactionMode_make(eyedb::EnumClass *OqlCtbTransactionMode_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbTransactionMode_class)
    return new eyedb::EnumClass("transaction_mode");
  eyedb::EnumItem *en[2];
  en[0] = new eyedb::EnumItem("TRANSACTION_OFF", "TransactionOff", (unsigned int)1);
  en[1] = new eyedb::EnumItem("TRANSACTION_ON", "TransactionOn", (unsigned int)2);

  OqlCtbTransactionMode_class->setEnumItems(en, 2);

  delete en[0];
  delete en[1];

  eyedb::ClassPeer::setMType(OqlCtbTransactionMode_class, eyedb::Class::System);

  return OqlCtbTransactionMode_class;
}

static void OqlCtbTransactionMode_init_p()
{
  OqlCtbTransactionMode_Class = OqlCtbTransactionMode_make();
}

static void OqlCtbTransactionMode_init()
{
  OqlCtbTransactionMode_make(OqlCtbTransactionMode_Class);

  OqlCtbTransactionMode_idr_objsz = OqlCtbTransactionMode_Class->getIDRObjectSize(&OqlCtbTransactionMode_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbTransactionMode_Class, eyedb::True);
}

static eyedb::Size OqlCtbTransactionLockMode_idr_objsz, OqlCtbTransactionLockMode_idr_psize;

static eyedb::EnumClass *OqlCtbTransactionLockMode_make(eyedb::EnumClass *OqlCtbTransactionLockMode_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbTransactionLockMode_class)
    return new eyedb::EnumClass("transaction_lockmode");
  eyedb::EnumItem *en[11];
  en[0] = new eyedb::EnumItem("READS_WRITES", "ReadSWriteS", (unsigned int)1);
  en[1] = new eyedb::EnumItem("READS_WRITESX", "ReadSWriteSX", (unsigned int)2);
  en[2] = new eyedb::EnumItem("READS_WRITEX", "ReadSWriteX", (unsigned int)3);
  en[3] = new eyedb::EnumItem("READSX_WRITESX", "ReadSXWriteSX", (unsigned int)4);
  en[4] = new eyedb::EnumItem("READSX_WRITEX", "ReadSXWriteX", (unsigned int)5);
  en[5] = new eyedb::EnumItem("READX_WRITEX", "ReadXWriteX", (unsigned int)6);
  en[6] = new eyedb::EnumItem("READN_WRITES", "ReadNWriteS", (unsigned int)7);
  en[7] = new eyedb::EnumItem("READN_WRITESX", "ReadNWriteSX", (unsigned int)8);
  en[8] = new eyedb::EnumItem("READN_WRITEX", "ReadNWriteX", (unsigned int)9);
  en[9] = new eyedb::EnumItem("READN_WRITEN", "ReadNWriteN", (unsigned int)10);
  en[10] = new eyedb::EnumItem("DATABASEX", "DatabaseX", (unsigned int)11);

  OqlCtbTransactionLockMode_class->setEnumItems(en, 11);

  delete en[0];
  delete en[1];
  delete en[2];
  delete en[3];
  delete en[4];
  delete en[5];
  delete en[6];
  delete en[7];
  delete en[8];
  delete en[9];
  delete en[10];

  eyedb::ClassPeer::setMType(OqlCtbTransactionLockMode_class, eyedb::Class::System);

  return OqlCtbTransactionLockMode_class;
}

static void OqlCtbTransactionLockMode_init_p()
{
  OqlCtbTransactionLockMode_Class = OqlCtbTransactionLockMode_make();
}

static void OqlCtbTransactionLockMode_init()
{
  OqlCtbTransactionLockMode_make(OqlCtbTransactionLockMode_Class);

  OqlCtbTransactionLockMode_idr_objsz = OqlCtbTransactionLockMode_Class->getIDRObjectSize(&OqlCtbTransactionLockMode_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbTransactionLockMode_Class, eyedb::True);
}

static eyedb::Size OqlCtbRecoveryMode_idr_objsz, OqlCtbRecoveryMode_idr_psize;

static eyedb::EnumClass *OqlCtbRecoveryMode_make(eyedb::EnumClass *OqlCtbRecoveryMode_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbRecoveryMode_class)
    return new eyedb::EnumClass("recovery_mode");
  eyedb::EnumItem *en[3];
  en[0] = new eyedb::EnumItem("RECOVERY_OFF", "RecoveryOff", (unsigned int)3);
  en[1] = new eyedb::EnumItem("RECOVERY_PARTIAL", "RecoveryPartial", (unsigned int)4);
  en[2] = new eyedb::EnumItem("RECOVERY_FULL", "RecoveryFull", (unsigned int)5);

  OqlCtbRecoveryMode_class->setEnumItems(en, 3);

  delete en[0];
  delete en[1];
  delete en[2];

  eyedb::ClassPeer::setMType(OqlCtbRecoveryMode_class, eyedb::Class::System);

  return OqlCtbRecoveryMode_class;
}

static void OqlCtbRecoveryMode_init_p()
{
  OqlCtbRecoveryMode_Class = OqlCtbRecoveryMode_make();
}

static void OqlCtbRecoveryMode_init()
{
  OqlCtbRecoveryMode_make(OqlCtbRecoveryMode_Class);

  OqlCtbRecoveryMode_idr_objsz = OqlCtbRecoveryMode_Class->getIDRObjectSize(&OqlCtbRecoveryMode_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbRecoveryMode_Class, eyedb::True);
}

static eyedb::Size OqlCtbToStringFlags_idr_objsz, OqlCtbToStringFlags_idr_psize;

static eyedb::EnumClass *OqlCtbToStringFlags_make(eyedb::EnumClass *OqlCtbToStringFlags_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbToStringFlags_class)
    return new eyedb::EnumClass("tostring_flags");
  eyedb::EnumItem *en[13];
  en[0] = new eyedb::EnumItem("MTIME_TRACE", "MTimeTrace", (unsigned int)1);
  en[1] = new eyedb::EnumItem("CTIME_TRACE", "CTimeTrace", (unsigned int)2);
  en[2] = new eyedb::EnumItem("CMTIME_TRACE", "CMTimeTrace", (unsigned int)3);
  en[3] = new eyedb::EnumItem("POINTER_TRACE", "PointerTrace", (unsigned int)4);
  en[4] = new eyedb::EnumItem("COMPOID_TRACE", "CompOidTrace", (unsigned int)8);
  en[5] = new eyedb::EnumItem("NATIVE_TRACE", "NativeTrace", (unsigned int)16);
  en[6] = new eyedb::EnumItem("CONTENTS_TRACE", "ContentsTrace", (unsigned int)32);
  en[7] = new eyedb::EnumItem("INHATTR_TRACE", "InhAttrTrace", (unsigned int)64);
  en[8] = new eyedb::EnumItem("INHEXEC_TRACE", "InhExecTrace", (unsigned int)128);
  en[9] = new eyedb::EnumItem("EXECBODY_TRACE", "ExecBodyTrace", (unsigned int)256);
  en[10] = new eyedb::EnumItem("SYSEXEC_TRACE", "SysExecTrace", (unsigned int)512);
  en[11] = new eyedb::EnumItem("NOSCOPE_TRACE", "NoScopeTrace", (unsigned int)1024);
  en[12] = new eyedb::EnumItem("FULLRECURS_TRACE", "FullRecursTrace", (unsigned int)4096);

  OqlCtbToStringFlags_class->setEnumItems(en, 13);

  delete en[0];
  delete en[1];
  delete en[2];
  delete en[3];
  delete en[4];
  delete en[5];
  delete en[6];
  delete en[7];
  delete en[8];
  delete en[9];
  delete en[10];
  delete en[11];
  delete en[12];

  eyedb::ClassPeer::setMType(OqlCtbToStringFlags_class, eyedb::Class::System);

  return OqlCtbToStringFlags_class;
}

static void OqlCtbToStringFlags_init_p()
{
  OqlCtbToStringFlags_Class = OqlCtbToStringFlags_make();
}

static void OqlCtbToStringFlags_init()
{
  OqlCtbToStringFlags_make(OqlCtbToStringFlags_Class);

  OqlCtbToStringFlags_idr_objsz = OqlCtbToStringFlags_Class->getIDRObjectSize(&OqlCtbToStringFlags_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbToStringFlags_Class, eyedb::True);
}

static eyedb::Size OqlCtbMapType_idr_objsz, OqlCtbMapType_idr_psize;

static eyedb::EnumClass *OqlCtbMapType_make(eyedb::EnumClass *OqlCtbMapType_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbMapType_class)
    return new eyedb::EnumClass("MapType");
  eyedb::EnumItem *en[2];
  en[0] = new eyedb::EnumItem("BITMAP_TYPE", "BitmapType", (unsigned int)0);
  en[1] = new eyedb::EnumItem("LINKMAP_TYPE", "LinkmapType", (unsigned int)1);

  OqlCtbMapType_class->setEnumItems(en, 2);

  delete en[0];
  delete en[1];

  eyedb::ClassPeer::setMType(OqlCtbMapType_class, eyedb::Class::System);

  return OqlCtbMapType_class;
}

static void OqlCtbMapType_init_p()
{
  OqlCtbMapType_Class = OqlCtbMapType_make();
}

static void OqlCtbMapType_init()
{
  OqlCtbMapType_make(OqlCtbMapType_Class);

  OqlCtbMapType_idr_objsz = OqlCtbMapType_Class->getIDRObjectSize(&OqlCtbMapType_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbMapType_Class, eyedb::True);
}

static eyedb::Size OqlCtbDatType_idr_objsz, OqlCtbDatType_idr_psize;

static eyedb::EnumClass *OqlCtbDatType_make(eyedb::EnumClass *OqlCtbDatType_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbDatType_class)
    return new eyedb::EnumClass("DatType");
  eyedb::EnumItem *en[2];
  en[0] = new eyedb::EnumItem("LOGICAL_OID_TYPE", "LogicalOidType", (unsigned int)256);
  en[1] = new eyedb::EnumItem("PHYSICAL_OID_TYPE", "PhysicalOidType", (unsigned int)257);

  OqlCtbDatType_class->setEnumItems(en, 2);

  delete en[0];
  delete en[1];

  eyedb::ClassPeer::setMType(OqlCtbDatType_class, eyedb::Class::System);

  return OqlCtbDatType_class;
}

static void OqlCtbDatType_init_p()
{
  OqlCtbDatType_Class = OqlCtbDatType_make();
}

static void OqlCtbDatType_init()
{
  OqlCtbDatType_make(OqlCtbDatType_Class);

  OqlCtbDatType_idr_objsz = OqlCtbDatType_Class->getIDRObjectSize(&OqlCtbDatType_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbDatType_Class, eyedb::True);
}

static eyedb::Status object_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8200, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getOid", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("object");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getObject", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "toString", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "toString", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("database");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getDatabase", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("database");
  comp = new eyedb::FEMethod_C(db, cls, "setDatabase", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("dataspace");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getDataspace", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("dataspace");
  comp = new eyedb::FEMethod_C(db, cls, "setDataspace", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("dataspace");
  comp = new eyedb::FEMethod_C(db, cls, "move", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "store", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("object");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "clone", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8196, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getCTime", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8196, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getMTime", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getStringCTime", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getStringMTime", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("bool");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "isRemoved", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("bool");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "isModify", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("lock_mode");
  comp = new eyedb::FEMethod_C(db, cls, "setLock", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("lock_mode");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "setLock", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("lock_mode");
  comp = new eyedb::FEMethod_C(db, cls, "getLock", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  return eyedb::Success;
}

static eyedb::Status object_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

static eyedb::Status class_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("dataspace");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getDefaultInstanceDataspace", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("dataspace");
  comp = new eyedb::FEMethod_C(db, cls, "setDefaultInstanceDataspace", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("dataspace");
  comp = new eyedb::FEMethod_C(db, cls, "moveInstances", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  return eyedb::Success;
}

static eyedb::Status class_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

static const eyedb::Attribute **OqlCtbDatafile_agritems;
static eyedb::Size OqlCtbDatafile_idr_objsz, OqlCtbDatafile_idr_psize;

static eyedb::StructClass *OqlCtbDatafile_make(eyedb::StructClass *OqlCtbDatafile_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbDatafile_class)
    return new eyedb::StructClass("datafile", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[11];
  int *dims;

  dims = 0;
  attr[2] = new eyedb::Attribute((m ? m->getClass("short") : eyedb::Int16_Class), "id", eyedb::False, 0, dims);

  dims = 0;
  attr[3] = new eyedb::Attribute((m ? m->getClass("short") : eyedb::Int16_Class), "dspid", eyedb::False, 0, dims);

  dims = 0;
  attr[4] = new eyedb::Attribute((m ? m->getClass("dataspace") : OqlCtbDataspace_Class), "dsp", eyedb::True, 0, dims);

  dims = new int[1];
  dims[0] = -1;
  attr[5] = new eyedb::Attribute((m ? m->getClass("char") : eyedb::Char_Class), "file", eyedb::False, 1, dims);
  delete[] dims;

  dims = new int[1];
  dims[0] = -1;
  attr[6] = new eyedb::Attribute((m ? m->getClass("char") : eyedb::Char_Class), "name", eyedb::False, 1, dims);
  delete[] dims;

  dims = 0;
  attr[7] = new eyedb::Attribute((m ? m->getClass("MapType") : OqlCtbMapType_Class), "mtype", eyedb::False, 0, dims);

  dims = 0;
  attr[8] = new eyedb::Attribute((m ? m->getClass("int") : eyedb::Int32_Class), "maxsize", eyedb::False, 0, dims);

  dims = 0;
  attr[9] = new eyedb::Attribute((m ? m->getClass("int") : eyedb::Int32_Class), "slotsize", eyedb::False, 0, dims);

  dims = 0;
  attr[10] = new eyedb::Attribute((m ? m->getClass("DatType") : OqlCtbDatType_Class), "dtype", eyedb::False, 0, dims);

  OqlCtbDatafile_class->setAttributes(&attr[2], 9);

  delete attr[2];
  delete attr[3];
  delete attr[4];
  delete attr[5];
  delete attr[6];
  delete attr[7];
  delete attr[8];
  delete attr[9];
  delete attr[10];

  eyedb::ClassPeer::setMType(OqlCtbDatafile_class, eyedb::Class::System);

  return OqlCtbDatafile_class;
}

eyedb::Object *OqlCtbDatafile_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new OqlCtbDatafile(cls, idr);
}

eyedb::Object *OqlCtbDatafile_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new OqlCtbDatafile((const eyedb::Struct *)o, share);
}

static void OqlCtbDatafile_init_p()
{
  OqlCtbDatafile_Class = OqlCtbDatafile_make();
  constructors_x[class_ind] = OqlCtbDatafile_construct_x;
  constructors[class_ind] = OqlCtbDatafile_construct;
  hash->insert("datafile", class_ind++);
}

static void OqlCtbDatafile_init()
{
  OqlCtbDatafile_make(OqlCtbDatafile_Class);

  OqlCtbDatafile_agritems = OqlCtbDatafile_Class->getAttributes();
  OqlCtbDatafile_idr_objsz = OqlCtbDatafile_Class->getIDRObjectSize(&OqlCtbDatafile_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbDatafile_Class, eyedb::True);
}

static eyedb::Status OqlCtbDatafile_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

OqlCtbDatafile::OqlCtbDatafile(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

OqlCtbDatafile::OqlCtbDatafile(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void OqlCtbDatafile::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("datafile") : OqlCtbDatafile_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

OqlCtbDatafile::OqlCtbDatafile(const OqlCtbDatafile& x) : eyedb::Struct(x)
{
  userCopy(x);
}

OqlCtbDatafile& OqlCtbDatafile::operator=(const OqlCtbDatafile& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

OqlCtbDatafile::OqlCtbDatafile(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("datafile") : OqlCtbDatafile_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

OqlCtbDatafile::OqlCtbDatafile(const OqlCtbDatafile *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("datafile") : OqlCtbDatafile_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

eyedb::Status OqlCtbDatafile::setId(eyedblib::int16 _id)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)&_id, 1, 0);
  return status;
}

eyedblib::int16 OqlCtbDatafile::getId(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int16 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status OqlCtbDatafile::setDspid(eyedblib::int16 _dspid)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[3]->setValue(this, (eyedb::Data)&_dspid, 1, 0);
  return status;
}

eyedblib::int16 OqlCtbDatafile::getDspid(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int16 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[3]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status OqlCtbDatafile::setDsp(OqlCtbDataspace*_dsp)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  eyedb::Object *_odsp = _dsp;

  status = getClass()->getAttributes()[4]->setValue(this, (eyedb::Data)&_odsp, 1, 0);
  return status;
}

const OqlCtbDataspace*OqlCtbDatafile::getDsp(eyedb::Bool *isnull, eyedb::Status *rs) const 
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Object *__o = 0, *__go;
  eyedb::Status s;

  s = getClass()->getAttributes()[4]->getValue(this, (eyedb::Data *)&__o, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}

  if (__o)
    {
     if (eyedb::ObjectPeer::isGRTObject(__o)) {
       return (OqlCtbDataspace *)__o;
     }
     __go = (OqlCtbDataspace *)make_object(__o, eyedb::False);
     if (__go)
      {
       __o = __go;
       s = getClass()->getAttributes()[4]->setValue((Agregat *)this, (eyedb::Data)&__o, 1, 0);
       eyedb::ObjectPeer::decrRefCount(__o);
       if (s) {if (rs) *rs = s; return 0;}
      }
     return (OqlCtbDataspace*)__o;
    }

  eyedb::Bool wasnull = (!__o ? eyedb::True : eyedb::False);
  if (!__o && db)
    {
      eyedb::Oid toid;
      s = getClass()->getAttributes()[4]->getOid(this, &toid, 1, 0);
      if (s) {if (rs) *rs = s; return 0;}
      if (toid.isValid())
        {
          s = db->loadObject(&toid, &__o);
          if (s) {if (rs) *rs = s; return 0;}
          if (!eyedb::ObjectPeer::isGRTObject(__o))
           {
             __go = (OqlCtbDataspace *)make_object(__o, eyedb::False);
             if (__go) __o = __go;
           }
        }
    }

  if (__o && wasnull)
    {
     s = getClass()->getAttributes()[4]->setValue((eyedb::Agregat *)this, (eyedb::Data)&__o, 1, 0);
     if (s) {if (rs) *rs = s; return 0;}
     __o->release();
    }
  return (OqlCtbDataspace*)__o;
}

OqlCtbDataspace*OqlCtbDatafile::getDsp(eyedb::Bool *isnull, eyedb::Status *rs) 
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Object *__o = 0, *__go;
  eyedb::Status s;

  s = getClass()->getAttributes()[4]->getValue(this, (eyedb::Data *)&__o, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}

  if (__o)
    {
     if (eyedb::ObjectPeer::isGRTObject(__o)) {
       return (OqlCtbDataspace *)__o;
     }
     __go = (OqlCtbDataspace *)make_object(__o, eyedb::False);
     if (__go)
      {
       __o = __go;
       s = getClass()->getAttributes()[4]->setValue((Agregat *)this, (eyedb::Data)&__o, 1, 0);
       eyedb::ObjectPeer::decrRefCount(__o);
       if (s) {if (rs) *rs = s; return 0;}
      }
     return (OqlCtbDataspace*)__o;
    }

  eyedb::Bool wasnull = (!__o ? eyedb::True : eyedb::False);
  if (!__o && db)
    {
      eyedb::Oid toid;
      s = getClass()->getAttributes()[4]->getOid(this, &toid, 1, 0);
      if (s) {if (rs) *rs = s; return 0;}
      if (toid.isValid())
        {
          s = db->loadObject(&toid, &__o);
          if (s) {if (rs) *rs = s; return 0;}
          if (!eyedb::ObjectPeer::isGRTObject(__o))
           {
             __go = (OqlCtbDataspace *)make_object(__o, eyedb::False);
             if (__go) __o = __go;
           }
        }
    }

  if (__o && wasnull)
    {
     s = getClass()->getAttributes()[4]->setValue((eyedb::Agregat *)this, (eyedb::Data)&__o, 1, 0);
     if (s) {if (rs) *rs = s; return 0;}
     __o->release();
    }
  return (OqlCtbDataspace*)__o;
}

eyedb::Status OqlCtbDatafile::setDspOid(const eyedb::Oid &_oid)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[4]->setOid(this, &_oid, 1, 0, oid_check);
  return status;
}

eyedb::Oid OqlCtbDatafile::getDspOid(eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Oid __tmp;
  eyedb::Status s;

  s = getClass()->getAttributes()[4]->getOid(this, &__tmp, 1, 0);
  if (s) {if (rs) *rs = s; return nulloid;}

  return __tmp;
}

eyedb::Status OqlCtbDatafile::setFile(const std::string &_file)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size size;
  eyedb::Size len = _file.size() + 1;

  status = getClass()->getAttributes()[5]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[5]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[5]->setValue(this, (eyedb::Data)_file.c_str(), len, 0);
  return status;

}

eyedb::Status OqlCtbDatafile::setFile(unsigned int a0, char _file)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[5]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[5]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[5]->setValue(this, (eyedb::Data)&_file, 1, from);
  return status;
}

std::string OqlCtbDatafile::getFile(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Data data;
  eyedb::Status s;

  s = getClass()->getAttributes()[5]->getValue(this, (eyedb::Data *)&data, eyedb::Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char OqlCtbDatafile::getFile(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[5]->getValue(this, (eyedb::Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status OqlCtbDatafile::setName(const std::string &_name)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size size;
  eyedb::Size len = _name.size() + 1;

  status = getClass()->getAttributes()[6]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[6]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[6]->setValue(this, (eyedb::Data)_name.c_str(), len, 0);
  return status;

}

eyedb::Status OqlCtbDatafile::setName(unsigned int a0, char _name)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[6]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[6]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[6]->setValue(this, (eyedb::Data)&_name, 1, from);
  return status;
}

std::string OqlCtbDatafile::getName(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Data data;
  eyedb::Status s;

  s = getClass()->getAttributes()[6]->getValue(this, (eyedb::Data *)&data, eyedb::Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char OqlCtbDatafile::getName(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[6]->getValue(this, (eyedb::Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status OqlCtbDatafile::setMtype(OqlCtbMapType::Type _mtype, eyedb::Bool _check_value)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedblib::int32 __tmp = _mtype;

  status = getClass()->getAttributes()[7]->setValue(this, (eyedb::Data)&__tmp, 1, 0, _check_value);
  return status;
}

OqlCtbMapType::Type OqlCtbDatafile::getMtype(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int32  __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[7]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return (OqlCtbMapType::Type)0;}
  return (OqlCtbMapType::Type)__tmp;
}

eyedb::Status OqlCtbDatafile::setMaxsize(eyedblib::int32 _maxsize)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[8]->setValue(this, (eyedb::Data)&_maxsize, 1, 0);
  return status;
}

eyedblib::int32 OqlCtbDatafile::getMaxsize(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int32 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[8]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status OqlCtbDatafile::setSlotsize(eyedblib::int32 _slotsize)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[9]->setValue(this, (eyedb::Data)&_slotsize, 1, 0);
  return status;
}

eyedblib::int32 OqlCtbDatafile::getSlotsize(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int32 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[9]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status OqlCtbDatafile::setDtype(OqlCtbDatType::Type _dtype, eyedb::Bool _check_value)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedblib::int32 __tmp = _dtype;

  status = getClass()->getAttributes()[10]->setValue(this, (eyedb::Data)&__tmp, 1, 0, _check_value);
  return status;
}

OqlCtbDatType::Type OqlCtbDatafile::getDtype(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int32  __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[10]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return (OqlCtbDatType::Type)0;}
  return (OqlCtbDatType::Type)__tmp;
}

static const eyedb::Attribute **OqlCtbDataspace_agritems;
static eyedb::Size OqlCtbDataspace_idr_objsz, OqlCtbDataspace_idr_psize;

static eyedb::StructClass *OqlCtbDataspace_make(eyedb::StructClass *OqlCtbDataspace_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbDataspace_class)
    return new eyedb::StructClass("dataspace", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[5];
  int *dims;

  dims = 0;
  attr[2] = new eyedb::Attribute((m ? m->getClass("short") : eyedb::Int16_Class), "id", eyedb::False, 0, dims);

  dims = new int[1];
  dims[0] = -1;
  attr[3] = new eyedb::Attribute((m ? m->getClass("char") : eyedb::Char_Class), "name", eyedb::False, 1, dims);
  delete[] dims;

  dims = new int[1];
  dims[0] = -1;
  attr[4] = new eyedb::Attribute((m ? m->getClass("datafile") : OqlCtbDatafile_Class), "datafiles", eyedb::True, 1, dims);
  delete[] dims;

  OqlCtbDataspace_class->setAttributes(&attr[2], 3);

  delete attr[2];
  delete attr[3];
  delete attr[4];

  eyedb::ClassPeer::setMType(OqlCtbDataspace_class, eyedb::Class::System);

  return OqlCtbDataspace_class;
}

eyedb::Object *OqlCtbDataspace_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new OqlCtbDataspace(cls, idr);
}

eyedb::Object *OqlCtbDataspace_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new OqlCtbDataspace((const eyedb::Struct *)o, share);
}

static void OqlCtbDataspace_init_p()
{
  OqlCtbDataspace_Class = OqlCtbDataspace_make();
  constructors_x[class_ind] = OqlCtbDataspace_construct_x;
  constructors[class_ind] = OqlCtbDataspace_construct;
  hash->insert("dataspace", class_ind++);
}

static void OqlCtbDataspace_init()
{
  OqlCtbDataspace_make(OqlCtbDataspace_Class);

  OqlCtbDataspace_agritems = OqlCtbDataspace_Class->getAttributes();
  OqlCtbDataspace_idr_objsz = OqlCtbDataspace_Class->getIDRObjectSize(&OqlCtbDataspace_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbDataspace_Class, eyedb::True);
}

static eyedb::Status OqlCtbDataspace_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

OqlCtbDataspace::OqlCtbDataspace(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

OqlCtbDataspace::OqlCtbDataspace(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void OqlCtbDataspace::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("dataspace") : OqlCtbDataspace_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

OqlCtbDataspace::OqlCtbDataspace(const OqlCtbDataspace& x) : eyedb::Struct(x)
{
  userCopy(x);
}

OqlCtbDataspace& OqlCtbDataspace::operator=(const OqlCtbDataspace& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

OqlCtbDataspace::OqlCtbDataspace(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("dataspace") : OqlCtbDataspace_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

OqlCtbDataspace::OqlCtbDataspace(const OqlCtbDataspace *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("dataspace") : OqlCtbDataspace_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

eyedb::Status OqlCtbDataspace::setId(eyedblib::int16 _id)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)&_id, 1, 0);
  return status;
}

eyedblib::int16 OqlCtbDataspace::getId(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int16 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status OqlCtbDataspace::setName(const std::string &_name)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size size;
  eyedb::Size len = _name.size() + 1;

  status = getClass()->getAttributes()[3]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[3]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[3]->setValue(this, (eyedb::Data)_name.c_str(), len, 0);
  return status;

}

eyedb::Status OqlCtbDataspace::setName(unsigned int a0, char _name)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[3]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[3]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[3]->setValue(this, (eyedb::Data)&_name, 1, from);
  return status;
}

std::string OqlCtbDataspace::getName(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Data data;
  eyedb::Status s;

  s = getClass()->getAttributes()[3]->getValue(this, (eyedb::Data *)&data, eyedb::Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char OqlCtbDataspace::getName(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[3]->getValue(this, (eyedb::Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status OqlCtbDataspace::setDatafiles(unsigned int a0, OqlCtbDatafile*_datafiles)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[4]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[4]->setSize(this, from+1);
  if (status)
    return status;

  eyedb::Object *_odatafiles = _datafiles;

  status = getClass()->getAttributes()[4]->setValue(this, (eyedb::Data)&_odatafiles, 1, from);
  return status;
}

eyedb::Status OqlCtbDataspace::setDatafilesCount(unsigned int a0)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;
  status = getClass()->getAttributes()[4]->setSize(this, from);
  return status;
}

const OqlCtbDatafile*OqlCtbDataspace::getDatafiles(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const 
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Object *__o = 0, *__go;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[4]->getValue(this, (eyedb::Data *)&__o, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}

  if (__o)
    {
     if (eyedb::ObjectPeer::isGRTObject(__o)) {
       return (OqlCtbDatafile *)__o;
     }
     __go = (OqlCtbDatafile *)make_object(__o, eyedb::False);
     if (__go)
      {
       __o = __go;
       s = getClass()->getAttributes()[4]->setValue((Agregat *)this, (eyedb::Data)&__o, 1, from);
       eyedb::ObjectPeer::decrRefCount(__o);
       if (s) {if (rs) *rs = s; return 0;}
      }
     return (OqlCtbDatafile*)__o;
    }

  eyedb::Bool wasnull = (!__o ? eyedb::True : eyedb::False);
  if (!__o && db)
    {
      eyedb::Oid toid;
      s = getClass()->getAttributes()[4]->getOid(this, &toid, 1, from);
      if (s) {if (rs) *rs = s; return 0;}
      if (toid.isValid())
        {
          s = db->loadObject(&toid, &__o);
          if (s) {if (rs) *rs = s; return 0;}
          if (!eyedb::ObjectPeer::isGRTObject(__o))
           {
             __go = (OqlCtbDatafile *)make_object(__o, eyedb::False);
             if (__go) __o = __go;
           }
        }
    }

  if (__o && wasnull)
    {
     s = getClass()->getAttributes()[4]->setValue((eyedb::Agregat *)this, (eyedb::Data)&__o, 1, from);
     if (s) {if (rs) *rs = s; return 0;}
     __o->release();
    }
  return (OqlCtbDatafile*)__o;
}

OqlCtbDatafile*OqlCtbDataspace::getDatafiles(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) 
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Object *__o = 0, *__go;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[4]->getValue(this, (eyedb::Data *)&__o, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}

  if (__o)
    {
     if (eyedb::ObjectPeer::isGRTObject(__o)) {
       return (OqlCtbDatafile *)__o;
     }
     __go = (OqlCtbDatafile *)make_object(__o, eyedb::False);
     if (__go)
      {
       __o = __go;
       s = getClass()->getAttributes()[4]->setValue((Agregat *)this, (eyedb::Data)&__o, 1, from);
       eyedb::ObjectPeer::decrRefCount(__o);
       if (s) {if (rs) *rs = s; return 0;}
      }
     return (OqlCtbDatafile*)__o;
    }

  eyedb::Bool wasnull = (!__o ? eyedb::True : eyedb::False);
  if (!__o && db)
    {
      eyedb::Oid toid;
      s = getClass()->getAttributes()[4]->getOid(this, &toid, 1, from);
      if (s) {if (rs) *rs = s; return 0;}
      if (toid.isValid())
        {
          s = db->loadObject(&toid, &__o);
          if (s) {if (rs) *rs = s; return 0;}
          if (!eyedb::ObjectPeer::isGRTObject(__o))
           {
             __go = (OqlCtbDatafile *)make_object(__o, eyedb::False);
             if (__go) __o = __go;
           }
        }
    }

  if (__o && wasnull)
    {
     s = getClass()->getAttributes()[4]->setValue((eyedb::Agregat *)this, (eyedb::Data)&__o, 1, from);
     if (s) {if (rs) *rs = s; return 0;}
     __o->release();
    }
  return (OqlCtbDatafile*)__o;
}

unsigned int OqlCtbDataspace::getDatafilesCount(eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Size size;
  eyedb::Status s;
  s = getClass()->getAttributes()[4]->getSize(this, size);
  if (s) {if (rs) *rs = s; return 0;}
  return (int)size;
}

eyedb::Status OqlCtbDataspace::setDatafilesOid(unsigned int a0, const eyedb::Oid &_oid)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[4]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[4]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[4]->setOid(this, &_oid, 1, from, oid_check);
  return status;
}

eyedb::Oid OqlCtbDataspace::getDatafilesOid(unsigned int a0, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Oid __tmp;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[4]->getOid(this, &__tmp, 1, from);
  if (s) {if (rs) *rs = s; return nulloid;}

  return __tmp;
}

static eyedb::Status index_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getCount", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("dataspace");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getDefaultDataspace", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("dataspace");
  comp = new eyedb::FEMethod_C(db, cls, "setDefaultDataspace", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("dataspace");
  comp = new eyedb::FEMethod_C(db, cls, "move", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("bool");
  comp = new eyedb::FEMethod_C(db, cls, "getImplementation", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getStats", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("bool");
  comp = new eyedb::FEMethod_C(db, cls, "getStats", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("bool");
  comp = new eyedb::FEMethod_C(db, cls, "simulate", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "reimplement", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8200, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "reimplement", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  return eyedb::Success;
}

static eyedb::Status index_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

static eyedb::Status collection_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getCount", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getName", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "setName", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("bool");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4104, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "isIn", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8456, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4104, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "getElements", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("bool");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "isLiteral", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("bool");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "isPureLiteral", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("bool");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "isLiteralObject", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "setLiteralObject", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8200, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getLiteralOid", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("dataspace");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getDefaultDataspace", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("dataspace");
  comp = new eyedb::FEMethod_C(db, cls, "setDefaultDataspace", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("dataspace");
  comp = new eyedb::FEMethod_C(db, cls, "moveElements", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("bool");
  comp = new eyedb::FEMethod_C(db, cls, "getImplementation", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getImplStats", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("bool");
  comp = new eyedb::FEMethod_C(db, cls, "getImplStats", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("bool");
  comp = new eyedb::FEMethod_C(db, cls, "simulate", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "reimplement", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  return eyedb::Success;
}

static eyedb::Status collection_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

static eyedb::Status set_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4104, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "addTo", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4104, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "suppress", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  return eyedb::Success;
}

static eyedb::Status set_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

static eyedb::Status bag_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4104, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "addTo", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4104, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "suppress", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  return eyedb::Success;
}

static eyedb::Status bag_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

static eyedb::Status array_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4104, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "setInAt", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4104, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "append", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "suppressAt", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8200, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "retrieveAt", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  if (status = comp->realize()) return status;

  sign->release();

  return eyedb::Success;
}

static eyedb::Status array_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

static const eyedb::Attribute **OqlCtbEyedb_agritems;
static eyedb::Size OqlCtbEyedb_idr_objsz, OqlCtbEyedb_idr_psize;

static eyedb::StructClass *OqlCtbEyedb_make(eyedb::StructClass *OqlCtbEyedb_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbEyedb_class)
    return new eyedb::StructClass("eyedb", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[2];

  OqlCtbEyedb_class->setAttributes(&attr[2], 0);


  eyedb::ClassPeer::setMType(OqlCtbEyedb_class, eyedb::Class::System);

  return OqlCtbEyedb_class;
}

eyedb::Object *OqlCtbEyedb_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new OqlCtbEyedb(cls, idr);
}

eyedb::Object *OqlCtbEyedb_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new OqlCtbEyedb((const eyedb::Struct *)o, share);
}

static void OqlCtbEyedb_init_p()
{
  OqlCtbEyedb_Class = OqlCtbEyedb_make();
  constructors_x[class_ind] = OqlCtbEyedb_construct_x;
  constructors[class_ind] = OqlCtbEyedb_construct;
  hash->insert("eyedb", class_ind++);
}

static void OqlCtbEyedb_init()
{
  OqlCtbEyedb_make(OqlCtbEyedb_Class);

  OqlCtbEyedb_agritems = OqlCtbEyedb_Class->getAttributes();
  OqlCtbEyedb_idr_objsz = OqlCtbEyedb_Class->getIDRObjectSize(&OqlCtbEyedb_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbEyedb_Class, eyedb::True);
}

static eyedb::Status OqlCtbEyedb_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "getConfigValue", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getVersion", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getVersionNumber", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getCompilationTime", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getArchitecture", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return eyedb::Success;
}

static eyedb::Status OqlCtbEyedb_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

OqlCtbEyedb::OqlCtbEyedb(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

OqlCtbEyedb::OqlCtbEyedb(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void OqlCtbEyedb::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("eyedb") : OqlCtbEyedb_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

OqlCtbEyedb::OqlCtbEyedb(const OqlCtbEyedb& x) : eyedb::Struct(x)
{
  userCopy(x);
}

OqlCtbEyedb& OqlCtbEyedb::operator=(const OqlCtbEyedb& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

OqlCtbEyedb::OqlCtbEyedb(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("eyedb") : OqlCtbEyedb_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

OqlCtbEyedb::OqlCtbEyedb(const OqlCtbEyedb *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("eyedb") : OqlCtbEyedb_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

static const eyedb::Attribute **OqlCtbConnection_agritems;
static eyedb::Size OqlCtbConnection_idr_objsz, OqlCtbConnection_idr_psize;

static eyedb::StructClass *OqlCtbConnection_make(eyedb::StructClass *OqlCtbConnection_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbConnection_class)
    return new eyedb::StructClass("connection", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[2];

  OqlCtbConnection_class->setAttributes(&attr[2], 0);


  eyedb::ClassPeer::setMType(OqlCtbConnection_class, eyedb::Class::System);

  return OqlCtbConnection_class;
}

eyedb::Object *OqlCtbConnection_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new OqlCtbConnection(cls, idr);
}

eyedb::Object *OqlCtbConnection_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new OqlCtbConnection((const eyedb::Struct *)o, share);
}

static void OqlCtbConnection_init_p()
{
  OqlCtbConnection_Class = OqlCtbConnection_make();
  constructors_x[class_ind] = OqlCtbConnection_construct_x;
  constructors[class_ind] = OqlCtbConnection_construct;
  hash->insert("connection", class_ind++);
}

static void OqlCtbConnection_init()
{
  OqlCtbConnection_make(OqlCtbConnection_Class);

  OqlCtbConnection_agritems = OqlCtbConnection_Class->getAttributes();
  OqlCtbConnection_idr_objsz = OqlCtbConnection_Class->getIDRObjectSize(&OqlCtbConnection_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbConnection_Class, eyedb::True);
}

static eyedb::Status OqlCtbConnection_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "open", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "open", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "close", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return eyedb::Success;
}

static eyedb::Status OqlCtbConnection_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

OqlCtbConnection::OqlCtbConnection(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

OqlCtbConnection::OqlCtbConnection(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void OqlCtbConnection::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("connection") : OqlCtbConnection_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

OqlCtbConnection::OqlCtbConnection(const OqlCtbConnection& x) : eyedb::Struct(x)
{
  userCopy(x);
}

OqlCtbConnection& OqlCtbConnection::operator=(const OqlCtbConnection& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

OqlCtbConnection::OqlCtbConnection(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("connection") : OqlCtbConnection_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

OqlCtbConnection::OqlCtbConnection(const OqlCtbConnection *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("connection") : OqlCtbConnection_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

static const eyedb::Attribute **OqlCtbDatabase_agritems;
static eyedb::Size OqlCtbDatabase_idr_objsz, OqlCtbDatabase_idr_psize;

static eyedb::StructClass *OqlCtbDatabase_make(eyedb::StructClass *OqlCtbDatabase_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbDatabase_class)
    return new eyedb::StructClass("database", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[5];
  int *dims;

  dims = new int[1];
  dims[0] = -1;
  attr[2] = new eyedb::Attribute((m ? m->getClass("char") : eyedb::Char_Class), "dbname", eyedb::False, 1, dims);
  delete[] dims;

  dims = 0;
  attr[3] = new eyedb::Attribute((m ? m->getClass("int") : eyedb::Int32_Class), "dbid", eyedb::False, 0, dims);

  dims = new int[1];
  dims[0] = -1;
  attr[4] = new eyedb::Attribute((m ? m->getClass("char") : eyedb::Char_Class), "dbmdb", eyedb::False, 1, dims);
  delete[] dims;

  OqlCtbDatabase_class->setAttributes(&attr[2], 3);

  delete attr[2];
  delete attr[3];
  delete attr[4];

  eyedb::ClassPeer::setMType(OqlCtbDatabase_class, eyedb::Class::System);

  return OqlCtbDatabase_class;
}

eyedb::Object *OqlCtbDatabase_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new OqlCtbDatabase(cls, idr);
}

eyedb::Object *OqlCtbDatabase_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new OqlCtbDatabase((const eyedb::Struct *)o, share);
}

static void OqlCtbDatabase_init_p()
{
  OqlCtbDatabase_Class = OqlCtbDatabase_make();
  constructors_x[class_ind] = OqlCtbDatabase_construct_x;
  constructors[class_ind] = OqlCtbDatabase_construct;
  hash->insert("database", class_ind++);
}

static void OqlCtbDatabase_init()
{
  OqlCtbDatabase_make(OqlCtbDatabase_Class);

  OqlCtbDatabase_agritems = OqlCtbDatabase_Class->getAttributes();
  OqlCtbDatabase_idr_objsz = OqlCtbDatabase_Class->getIDRObjectSize(&OqlCtbDatabase_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbDatabase_Class, eyedb::True);
}

static eyedb::Status OqlCtbDatabase_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("connection");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "open", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(4);
  sign->setTypesCount(4);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("connection");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "open", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "open", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "open", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "close", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("bool");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "isAutoPersistMode", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("bool");
  comp = new eyedb::FEMethod_C(db, cls, "setAutoPersistMode", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("bool");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "isDefaultDatabase", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "setDefaultDatabase", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "create", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "create", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "destroy", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "destroy", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "rename", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "rename", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("connection");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getConnection", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getOpenMode", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("bool");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getCommitOnClose", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("bool");
  comp = new eyedb::FEMethod_C(db, cls, "setCommitOnClose", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getVersionNumber", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8197, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getVersion", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4104, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "removeObject", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("object");
  comp = new eyedb::FEMethod_C(db, cls, "uncacheObject", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4104, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "uncacheObject", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "transactionBegin", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(6);
  sign->setTypesCount(6);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(4);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(5);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "transactionBegin", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "transactionCommit", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "transactionAbort", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("bool");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "isInTransaction", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8457, eyedb::False);
  argtype->setClname("datafile");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getDatafiles", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("datafile");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "getDatafile", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("datafile");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "getDatafile", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8457, eyedb::False);
  argtype->setClname("dataspace");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getDataspaces", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("dataspace");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "getDataspace", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("dataspace");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4098, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "getDataspace", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8201, eyedb::False);
  argtype->setClname("dataspace");
  sign->setNargs(0);
  sign->setTypesCount(0);
  comp = new eyedb::FEMethod_C(db, cls, "getDefaultDataspace", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("dataspace");
  comp = new eyedb::FEMethod_C(db, cls, "setDefaultDataspace", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4360, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4105, eyedb::False);
  argtype->setClname("dataspace");
  comp = new eyedb::FEMethod_C(db, cls, "moveObjects", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "updateSchema", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(4);
  sign->setTypesCount(4);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "updateSchema", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(6);
  sign->setTypesCount(6);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(3);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(4);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(5);
  argtype->setType((eyedb::ArgType_Type)4101, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "updateSchema", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4104, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("lock_mode");
  comp = new eyedb::FEMethod_C(db, cls, "setObjectLock", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(3);
  sign->setTypesCount(3);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4104, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("lock_mode");
  argtype = sign->getTypes(2);
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("lock_mode");
  comp = new eyedb::FEMethod_C(db, cls, "setObjectLock", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8193, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4104, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("lock_mode");
  comp = new eyedb::FEMethod_C(db, cls, "getObjectLock", sign, eyedb::False, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return eyedb::Success;
}

static eyedb::Status OqlCtbDatabase_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

OqlCtbDatabase::OqlCtbDatabase(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

OqlCtbDatabase::OqlCtbDatabase(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void OqlCtbDatabase::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("database") : OqlCtbDatabase_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

OqlCtbDatabase::OqlCtbDatabase(const OqlCtbDatabase& x) : eyedb::Struct(x)
{
  userCopy(x);
}

OqlCtbDatabase& OqlCtbDatabase::operator=(const OqlCtbDatabase& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

OqlCtbDatabase::OqlCtbDatabase(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("database") : OqlCtbDatabase_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

OqlCtbDatabase::OqlCtbDatabase(const OqlCtbDatabase *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("database") : OqlCtbDatabase_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

eyedb::Status OqlCtbDatabase::setDbname(const std::string &_dbname)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size size;
  eyedb::Size len = _dbname.size() + 1;

  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[2]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)_dbname.c_str(), len, 0);
  return status;

}

eyedb::Status OqlCtbDatabase::setDbname(unsigned int a0, char _dbname)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[2]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[2]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[2]->setValue(this, (eyedb::Data)&_dbname, 1, from);
  return status;
}

std::string OqlCtbDatabase::getDbname(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Data data;
  eyedb::Status s;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&data, eyedb::Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char OqlCtbDatabase::getDbname(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[2]->getValue(this, (eyedb::Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status OqlCtbDatabase::setDbid(eyedblib::int32 _dbid)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;

  status = getClass()->getAttributes()[3]->setValue(this, (eyedb::Data)&_dbid, 1, 0);
  return status;
}

eyedblib::int32 OqlCtbDatabase::getDbid(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedblib::int32 __tmp = 0;
  eyedb::Status s;

  s = getClass()->getAttributes()[3]->getValue(this, (eyedb::Data *)&__tmp, 1, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

eyedb::Status OqlCtbDatabase::setDbmdb(const std::string &_dbmdb)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size size;
  eyedb::Size len = _dbmdb.size() + 1;

  status = getClass()->getAttributes()[4]->getSize(this, size);
  if (status)
    return status;

  if (size != len)
    status = getClass()->getAttributes()[4]->setSize(this, len);
  if (status)
    return status;

  status = getClass()->getAttributes()[4]->setValue(this, (eyedb::Data)_dbmdb.c_str(), len, 0);
  return status;

}

eyedb::Status OqlCtbDatabase::setDbmdb(unsigned int a0, char _dbmdb)
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Status status;
  eyedb::Size from = a0;

  eyedb::Size size;
  status = getClass()->getAttributes()[4]->getSize(this, size);
  if (status)
    return status;

  if (size <= from)
    status = getClass()->getAttributes()[4]->setSize(this, from+1);
  if (status)
    return status;

  status = getClass()->getAttributes()[4]->setValue(this, (eyedb::Data)&_dbmdb, 1, from);
  return status;
}

std::string OqlCtbDatabase::getDbmdb(eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  eyedb::Data data;
  eyedb::Status s;

  s = getClass()->getAttributes()[4]->getValue(this, (eyedb::Data *)&data, eyedb::Attribute::directAccess, 0, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  if (!data) data = nulldata;
  return (const char *)data;
}

char OqlCtbDatabase::getDbmdb(unsigned int a0, eyedb::Bool *isnull, eyedb::Status *rs) const
{
  eyedb::gbxAutoGarbSuspender _gbxsusp_;
  char __tmp = 0;
  eyedb::Status s;
  eyedb::Size from = a0;

  s = getClass()->getAttributes()[4]->getValue(this, (eyedb::Data *)&__tmp, 1, from, isnull);
  if (s) {if (rs) *rs = s; return 0;}
  return __tmp;
}

static const eyedb::Attribute **OqlCtbMath_agritems;
static eyedb::Size OqlCtbMath_idr_objsz, OqlCtbMath_idr_psize;

static eyedb::StructClass *OqlCtbMath_make(eyedb::StructClass *OqlCtbMath_class = 0, eyedb::Schema *m = 0)
{
  if (!OqlCtbMath_class)
    return new eyedb::StructClass("math", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[2];

  OqlCtbMath_class->setAttributes(&attr[2], 0);


  eyedb::ClassPeer::setMType(OqlCtbMath_class, eyedb::Class::System);

  return OqlCtbMath_class;
}

eyedb::Object *OqlCtbMath_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new OqlCtbMath(cls, idr);
}

eyedb::Object *OqlCtbMath_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new OqlCtbMath((const eyedb::Struct *)o, share);
}

static void OqlCtbMath_init_p()
{
  OqlCtbMath_Class = OqlCtbMath_make();
  constructors_x[class_ind] = OqlCtbMath_construct_x;
  constructors[class_ind] = OqlCtbMath_construct;
  hash->insert("math", class_ind++);
}

static void OqlCtbMath_init()
{
  OqlCtbMath_make(OqlCtbMath_Class);

  OqlCtbMath_agritems = OqlCtbMath_Class->getAttributes();
  OqlCtbMath_idr_objsz = OqlCtbMath_Class->getIDRObjectSize(&OqlCtbMath_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(OqlCtbMath_Class, eyedb::True);
}

static eyedb::Status OqlCtbMath_comp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  eyedb::ClassComponent *comp;
  eyedb::Status status;
  eyedb::Signature *sign;
  eyedb::ArgType *argtype;

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "acos", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "asin", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "atan", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "atan2", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "cos", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "sin", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "tan", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "cosh", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "sinh", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "tanh", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "exp", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "log", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "log10", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "pow", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "sqrt", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "ceil", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "fabs", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "floor", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "fmod", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "erf", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "erfc", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "gamma", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "hypot", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "isnan", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "j0", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "j1", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "jn", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "lgamma", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "y0", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "y1", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4099, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "yn", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "acosh", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "asinh", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "atanh", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "cbrt", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "logb", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "nextafter", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "remainder", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(2);
  sign->setTypesCount(2);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  argtype = sign->getTypes(1);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "scalb", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "expm1", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8195, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "ilogb", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "log1p", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  sign = new eyedb::Signature();
  argtype = sign->getRettype();
  argtype->setType((eyedb::ArgType_Type)8199, eyedb::False);
  argtype->setClname("");
  sign->setNargs(1);
  sign->setTypesCount(1);
  argtype = sign->getTypes(0);
  argtype->setType((eyedb::ArgType_Type)4103, eyedb::False);
  argtype->setClname("");
  comp = new eyedb::FEMethod_C(db, cls, "rint", sign, eyedb::True, eyedb::True, "oqlctbmthfe");
  cls->add(comp->getInd(), comp);

  sign->release();

  return eyedb::Success;
}

static eyedb::Status OqlCtbMath_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

OqlCtbMath::OqlCtbMath(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

OqlCtbMath::OqlCtbMath(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void OqlCtbMath::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("math") : OqlCtbMath_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

OqlCtbMath::OqlCtbMath(const OqlCtbMath& x) : eyedb::Struct(x)
{
  userCopy(x);
}

OqlCtbMath& OqlCtbMath::operator=(const OqlCtbMath& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

OqlCtbMath::OqlCtbMath(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("math") : OqlCtbMath_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

OqlCtbMath::OqlCtbMath(const OqlCtbMath *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("math") : OqlCtbMath_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

static const eyedb::Attribute **oql_agritems;
static eyedb::Size oql_idr_objsz, oql_idr_psize;

static eyedb::StructClass *oql_make(eyedb::StructClass *oql_class = 0, eyedb::Schema *m = 0)
{
  if (!oql_class)
    return new eyedb::StructClass("oql", (m ? m->getClass("struct") : eyedb::Struct_Class));
  eyedb::Attribute *attr[2];

  oql_class->setAttributes(&attr[2], 0);


  eyedb::ClassPeer::setMType(oql_class, eyedb::Class::System);

  return oql_class;
}

eyedb::Object *oql_construct_x(const eyedb::Class *cls, eyedb::Data idr)
{
  return new oql(cls, idr);
}

eyedb::Object *oql_construct(const eyedb::Object *o, eyedb::Bool share)
{
  return new oql((const eyedb::Struct *)o, share);
}

static void oql_init_p()
{
  oql_Class = oql_make();
  constructors_x[class_ind] = oql_construct_x;
  constructors[class_ind] = oql_construct;
  hash->insert("oql", class_ind++);
}

static void oql_init()
{
  oql_make(oql_Class);

  oql_agritems = oql_Class->getAttributes();
  oql_idr_objsz = oql_Class->getIDRObjectSize(&oql_idr_psize, 0);

  eyedb::ObjectPeer::setUnrealizable(oql_Class, eyedb::True);
}

static eyedb::Status oql_attrcomp_realize(eyedb::Database *db, eyedb::Class *cls)
{
  return eyedb::Success;
}

oql::oql(eyedb::Database *_db, const eyedb::Dataspace *_dataspace) : eyedb::Struct(_db, _dataspace)
{
  initialize(_db);
}

oql::oql(const eyedb::Class *_cls, eyedb::Data _idr)
{
  setClass((eyedb::Class *)_cls);

  eyedb::Size idr_psize;
  eyedb::Size idr_tsize = getClass()->getIDRObjectSize(&idr_psize);
  if (_idr)
    idr->setIDR(idr_tsize, _idr);
  else
    {
      idr->setIDR(idr_tsize);
      memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
    }
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

void oql::initialize(eyedb::Database *_db)
{
  setClass((_db ? _db->getSchema()->getClass("oql") : oql_Class));

  eyedb::Size idr_psize;
  idr->setIDR(getClass()->getIDRObjectSize(&idr_psize));
  memset(idr->getIDR() + IDB_OBJ_HEAD_SIZE, 0, idr->getSize() - IDB_OBJ_HEAD_SIZE);
  headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
  eyedb::ClassPeer::newObjRealize(getClass(), this);
  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userInitialize();
}

oql::oql(const oql& x) : eyedb::Struct(x)
{
  userCopy(x);
}

oql& oql::operator=(const oql& x)
{
  *(eyedb::Struct *)this = eyedb::Struct::operator=((const eyedb::Struct &)x);
  userCopy(x);
  return *this;
}

oql::oql(const eyedb::Struct *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("oql") : oql_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

oql::oql(const oql *x, eyedb::Bool share) : eyedb::Struct(x, share)
{
  setClass((db ? db->getSchema()->getClass("oql") : oql_Class));

  eyedb::Size idr_psize;
  getClass()->getIDRObjectSize(&idr_psize);
  if (!share)
    {
      headerCode(eyedb::_Struct_Type, idr_psize, IDB_XINFO_LOCAL_OBJ);
      eyedb::ClassPeer::newObjRealize(getClass(), this);
    }

  eyedb::ObjectPeer::setGRTObject(this, eyedb::True);
  userCopy(*x);
}

static const char not_exit_msg[] = "class does not exist";
static const char differ_msg[] = "class differs in database and in runtime environment";

void oqlctbInit(void)
{
  if (hash) return;

  hash = new eyedb::GenHashTable(0, 108);

  OqlCtbDatabaseOpenMode_init_p();
  OqlCtbLockMode_init_p();
  OqlCtbTransactionMode_init_p();
  OqlCtbTransactionLockMode_init_p();
  OqlCtbRecoveryMode_init_p();
  OqlCtbToStringFlags_init_p();
  OqlCtbMapType_init_p();
  OqlCtbDatType_init_p();
  OqlCtbDatafile_init_p();
  OqlCtbDataspace_init_p();
  OqlCtbEyedb_init_p();
  OqlCtbConnection_init_p();
  OqlCtbDatabase_init_p();
  OqlCtbMath_init_p();
  oql_init_p();
  OqlCtbDatabaseOpenMode_init();
  OqlCtbLockMode_init();
  OqlCtbTransactionMode_init();
  OqlCtbTransactionLockMode_init();
  OqlCtbRecoveryMode_init();
  OqlCtbToStringFlags_init();
  OqlCtbMapType_init();
  OqlCtbDatType_init();
  OqlCtbDatafile_init();
  OqlCtbDataspace_init();
  OqlCtbEyedb_init();
  OqlCtbConnection_init();
  OqlCtbDatabase_init();
  OqlCtbMath_init();
  oql_init();
}

void oqlctbRelease(void)
{
  if (!hash) return;

  delete hash;
  hash = 0;

  OqlCtbDatabaseOpenMode_Class->release();
  OqlCtbLockMode_Class->release();
  OqlCtbTransactionMode_Class->release();
  OqlCtbTransactionLockMode_Class->release();
  OqlCtbRecoveryMode_Class->release();
  OqlCtbToStringFlags_Class->release();
  OqlCtbMapType_Class->release();
  OqlCtbDatType_Class->release();
  OqlCtbDatafile_Class->release();
  OqlCtbDataspace_Class->release();
  OqlCtbEyedb_Class->release();
  OqlCtbConnection_Class->release();
  OqlCtbDatabase_Class->release();
  OqlCtbMath_Class->release();
  oql_Class->release();
}

static eyedb::Status
oqlctbSchemaUpdate(eyedb::Schema *m, eyedb::Database *db)
{
  m->setName("eyedb");
  eyedb::Status status;
  eyedb::EnumClass *OqlCtbDatabaseOpenMode_class = OqlCtbDatabaseOpenMode_make(0, m);
  if (!m->getClass("database_open_mode"))
    {
      status = m->addClass(OqlCtbDatabaseOpenMode_class);
      if (status)
        return status;
    }
  eyedb::EnumClass *OqlCtbLockMode_class = OqlCtbLockMode_make(0, m);
  if (!m->getClass("lock_mode"))
    {
      status = m->addClass(OqlCtbLockMode_class);
      if (status)
        return status;
    }
  eyedb::EnumClass *OqlCtbTransactionMode_class = OqlCtbTransactionMode_make(0, m);
  if (!m->getClass("transaction_mode"))
    {
      status = m->addClass(OqlCtbTransactionMode_class);
      if (status)
        return status;
    }
  eyedb::EnumClass *OqlCtbTransactionLockMode_class = OqlCtbTransactionLockMode_make(0, m);
  if (!m->getClass("transaction_lockmode"))
    {
      status = m->addClass(OqlCtbTransactionLockMode_class);
      if (status)
        return status;
    }
  eyedb::EnumClass *OqlCtbRecoveryMode_class = OqlCtbRecoveryMode_make(0, m);
  if (!m->getClass("recovery_mode"))
    {
      status = m->addClass(OqlCtbRecoveryMode_class);
      if (status)
        return status;
    }
  eyedb::EnumClass *OqlCtbToStringFlags_class = OqlCtbToStringFlags_make(0, m);
  if (!m->getClass("tostring_flags"))
    {
      status = m->addClass(OqlCtbToStringFlags_class);
      if (status)
        return status;
    }
  eyedb::EnumClass *OqlCtbMapType_class = OqlCtbMapType_make(0, m);
  if (!m->getClass("MapType"))
    {
      status = m->addClass(OqlCtbMapType_class);
      if (status)
        return status;
    }
  eyedb::EnumClass *OqlCtbDatType_class = OqlCtbDatType_make(0, m);
  if (!m->getClass("DatType"))
    {
      status = m->addClass(OqlCtbDatType_class);
      if (status)
        return status;
    }
  eyedb::StructClass *OqlCtbDatafile_class = OqlCtbDatafile_make(0, m);
  if (!m->getClass("datafile"))
    {
      status = m->addClass(OqlCtbDatafile_class);
      if (status)
        return status;
    }
  eyedb::StructClass *OqlCtbDataspace_class = OqlCtbDataspace_make(0, m);
  if (!m->getClass("dataspace"))
    {
      status = m->addClass(OqlCtbDataspace_class);
      if (status)
        return status;
    }
  eyedb::StructClass *OqlCtbEyedb_class = OqlCtbEyedb_make(0, m);
  if (!m->getClass("eyedb"))
    {
      status = m->addClass(OqlCtbEyedb_class);
      if (status)
        return status;
    }
  eyedb::StructClass *OqlCtbConnection_class = OqlCtbConnection_make(0, m);
  if (!m->getClass("connection"))
    {
      status = m->addClass(OqlCtbConnection_class);
      if (status)
        return status;
    }
  eyedb::StructClass *OqlCtbDatabase_class = OqlCtbDatabase_make(0, m);
  if (!m->getClass("database"))
    {
      status = m->addClass(OqlCtbDatabase_class);
      if (status)
        return status;
    }
  eyedb::StructClass *OqlCtbMath_class = OqlCtbMath_make(0, m);
  if (!m->getClass("math"))
    {
      status = m->addClass(OqlCtbMath_class);
      if (status)
        return status;
    }
  eyedb::StructClass *oql_class = oql_make(0, m);
  if (!m->getClass("oql"))
    {
      status = m->addClass(oql_class);
      if (status)
        return status;
    }

  OqlCtbDatabaseOpenMode_make(OqlCtbDatabaseOpenMode_class, m);
  OqlCtbLockMode_make(OqlCtbLockMode_class, m);
  OqlCtbTransactionMode_make(OqlCtbTransactionMode_class, m);
  OqlCtbTransactionLockMode_make(OqlCtbTransactionLockMode_class, m);
  OqlCtbRecoveryMode_make(OqlCtbRecoveryMode_class, m);
  OqlCtbToStringFlags_make(OqlCtbToStringFlags_class, m);
  OqlCtbMapType_make(OqlCtbMapType_class, m);
  OqlCtbDatType_make(OqlCtbDatType_class, m);
  OqlCtbDatafile_make(OqlCtbDatafile_class, m);
  OqlCtbDataspace_make(OqlCtbDataspace_class, m);
  OqlCtbEyedb_make(OqlCtbEyedb_class, m);
  OqlCtbConnection_make(OqlCtbConnection_class, m);
  OqlCtbDatabase_make(OqlCtbDatabase_class, m);
  OqlCtbMath_make(OqlCtbMath_class, m);
  oql_make(oql_class, m);

  if (!db) return eyedb::Success;

  if (!OqlCtbDatabaseOpenMode_class->compare(m->getClass("database_open_mode")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbDatabaseOpenMode' %s", differ_msg);
  if (!OqlCtbLockMode_class->compare(m->getClass("lock_mode")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbLockMode' %s", differ_msg);
  if (!OqlCtbTransactionMode_class->compare(m->getClass("transaction_mode")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbTransactionMode' %s", differ_msg);
  if (!OqlCtbTransactionLockMode_class->compare(m->getClass("transaction_lockmode")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbTransactionLockMode' %s", differ_msg);
  if (!OqlCtbRecoveryMode_class->compare(m->getClass("recovery_mode")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbRecoveryMode' %s", differ_msg);
  if (!OqlCtbToStringFlags_class->compare(m->getClass("tostring_flags")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbToStringFlags' %s", differ_msg);
  if (!OqlCtbMapType_class->compare(m->getClass("MapType")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbMapType' %s", differ_msg);
  if (!OqlCtbDatType_class->compare(m->getClass("DatType")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbDatType' %s", differ_msg);
  if (!OqlCtbDatafile_class->compare(m->getClass("datafile")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbDatafile' %s", differ_msg);
  if (!OqlCtbDataspace_class->compare(m->getClass("dataspace")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbDataspace' %s", differ_msg);
  if (!OqlCtbEyedb_class->compare(m->getClass("eyedb")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbEyedb' %s", differ_msg);
  if (!OqlCtbConnection_class->compare(m->getClass("connection")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbConnection' %s", differ_msg);
  if (!OqlCtbDatabase_class->compare(m->getClass("database")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbDatabase' %s", differ_msg);
  if (!OqlCtbMath_class->compare(m->getClass("math")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'OqlCtbMath' %s", differ_msg);
  if (!oql_class->compare(m->getClass("oql")))
    return eyedb::Exception::make(eyedb::IDB_ERROR, "'oql' %s", differ_msg);

  db->transactionBegin();

  if ((status = object_comp_realize(db, m->getClass("object")))) return status;

  if ((status = class_comp_realize(db, m->getClass("class")))) return status;

  if ((status = index_comp_realize(db, m->getClass("index")))) return status;

  if ((status = collection_comp_realize(db, m->getClass("collection")))) return status;

  if ((status = set_comp_realize(db, m->getClass("set")))) return status;

  if ((status = bag_comp_realize(db, m->getClass("bag")))) return status;

  if ((status = array_comp_realize(db, m->getClass("array")))) return status;

  if ((status = OqlCtbEyedb_comp_realize(db, m->getClass("eyedb")))) return status;

  if ((status = OqlCtbConnection_comp_realize(db, m->getClass("connection")))) return status;

  if ((status = OqlCtbDatabase_comp_realize(db, m->getClass("database")))) return status;

  if ((status = OqlCtbMath_comp_realize(db, m->getClass("math")))) return status;

  if ((status = object_attrcomp_realize(db, m->getClass("object")))) return status;

  if ((status = class_attrcomp_realize(db, m->getClass("class")))) return status;

  if ((status = OqlCtbDatafile_attrcomp_realize(db, m->getClass("datafile")))) return status;

  if ((status = OqlCtbDataspace_attrcomp_realize(db, m->getClass("dataspace")))) return status;

  if ((status = index_attrcomp_realize(db, m->getClass("index")))) return status;

  if ((status = collection_attrcomp_realize(db, m->getClass("collection")))) return status;

  if ((status = set_attrcomp_realize(db, m->getClass("set")))) return status;

  if ((status = bag_attrcomp_realize(db, m->getClass("bag")))) return status;

  if ((status = array_attrcomp_realize(db, m->getClass("array")))) return status;

  if ((status = OqlCtbEyedb_attrcomp_realize(db, m->getClass("eyedb")))) return status;

  if ((status = OqlCtbConnection_attrcomp_realize(db, m->getClass("connection")))) return status;

  if ((status = OqlCtbDatabase_attrcomp_realize(db, m->getClass("database")))) return status;

  if ((status = OqlCtbMath_attrcomp_realize(db, m->getClass("math")))) return status;

  if ((status = oql_attrcomp_realize(db, m->getClass("oql")))) return status;
  status = m->realize();
  if (status) return status;
  db->transactionCommit();
  return eyedb::Success;
}

eyedb::Status oqlctbSchemaUpdate(eyedb::Database *db)
{
  return oqlctbSchemaUpdate(db->getSchema(), db);
}

eyedb::Status oqlctbSchemaUpdate(eyedb::Schema *m)
{
  return oqlctbSchemaUpdate(m, NULL);
}

eyedb::Object *oqlctbMakeObject(eyedb::Object *o, eyedb::Bool remove)
{
  if (!o->getClass()) return (eyedb::Object *)0;
  if (eyedb::ObjectPeer::isGRTObject(o))
    return o;
  int ind = hash->get(o->getClass()->getName());
  if (ind < 0 && (!o->getClass()->getStrictAliasName() || (ind = hash->get(o->getClass()->getStrictAliasName())) < 0)) return 0;
  eyedb::Object *co = constructors[ind](o, (remove ? eyedb::True : eyedb::False));
  eyedb::ObjectPeer::setClass(co, o->getClass());
  if (remove) o->release();
  if (co->getDatabase())
    co->getDatabase()->cacheObject(co);
  return co;
}

oqlctbDatabase::oqlctbDatabase(eyedb::Connection *conn, const char *dbname, eyedb::Database::OpenFlag flag, const char *userauth, const char *passwdauth) : eyedb::Database(dbname)
{
  eyedb::Status status = open(conn, flag, 0, userauth, passwdauth);
  if (status) throw *status;
}

oqlctbDatabase::oqlctbDatabase(eyedb::Connection *conn, const char *dbname, const char *dbmdb_str, eyedb::Database::OpenFlag flag, const char *userauth, const char *passwdauth) : eyedb::Database(dbname, dbmdb_str)
{
  eyedb::Status status = open(conn, flag, 0, userauth, passwdauth);
  if (status) throw *status;
}

eyedb::Status oqlctbDatabase::open(eyedb::Connection *conn, eyedb::Database::OpenFlag flag, const char *userauth, const char *passwdauth)
{
  return open(conn, flag, 0, userauth, passwdauth);
}

eyedb::Status oqlctbDatabase::open(eyedb::Connection *conn, eyedb::Database::OpenFlag flag, const eyedb::OpenHints *hints, const char *userauth, const char *passwdauth)
{
  eyedb::Status status = eyedb::Database::open(conn, flag, hints, userauth, passwdauth);
  if (status) return status;
  transactionBegin();
  status = oqlctbDatabase::checkSchema(getSchema());
  transactionCommit();

  if (!status) add(hash, constructors_x);

  return status;
}

void oqlctbDatabase::setConsApp(eyedb::Database *_db)
{
  _db->add(hash, constructors_x);
}

static void append(char *&s, const char *m1, const char *m2)
{
  if (!s) {s = (char *)malloc(strlen(m1)+strlen(m2)+2); *s = 0;}
  else s = (char *)realloc(s, strlen(s)+strlen(m1)+strlen(m2)+2);
  strcat(s, m1);
  strcat(s, m2);
  strcat(s, "\n");
}

eyedb::Bool oqlctbDatabase::getDynamicGetErrorPolicy() {
   throw *eyedb::Exception::make(eyedb::IDB_ERROR, "getDynamicGetErrorPolicy() can be called only when the dynamic attribute fonctionnality is on (-dynamic-attr option of eyedbodl)");
}

eyedb::Bool oqlctbDatabase::getDynamicSetErrorPolicy() {
   throw *eyedb::Exception::make(eyedb::IDB_ERROR, "getDynamicSetErrorPolicy() can be called only when the dynamic attribute fonctionnality is on (-dynamic-attr option of eyedbodl)");
}

void oqlctbDatabase::setDynamicGetErrorPolicy(eyedb::Bool policy) {
   throw *eyedb::Exception::make(eyedb::IDB_ERROR, "setDynamicGetErrorPolicy() can be called only when the dynamic attribute fonctionnality is on (-dynamic-attr option of eyedbodl)");
}

void oqlctbDatabase::setDynamicSetErrorPolicy(eyedb::Bool policy) {
   throw *eyedb::Exception::make(eyedb::IDB_ERROR, "setDynamicSetErrorPolicy() can be called only when the dynamic attribute fonctionnality is on (-dynamic-attr option of eyedbodl)");
}

eyedb::Status oqlctbDatabase::checkSchema(eyedb::Schema *m)
{
  eyedb::Class *cl;
  char *s = 0;

  if (!(cl = m->getClass("database_open_mode")))
    append(s, "'database_open_mode' ", not_exit_msg);
  else if (!OqlCtbDatabaseOpenMode_Class->compare(cl))
    append(s, "'OqlCtbDatabaseOpenMode' ", differ_msg);
  if (!(cl = m->getClass("lock_mode")))
    append(s, "'lock_mode' ", not_exit_msg);
  else if (!OqlCtbLockMode_Class->compare(cl))
    append(s, "'OqlCtbLockMode' ", differ_msg);
  if (!(cl = m->getClass("transaction_mode")))
    append(s, "'transaction_mode' ", not_exit_msg);
  else if (!OqlCtbTransactionMode_Class->compare(cl))
    append(s, "'OqlCtbTransactionMode' ", differ_msg);
  if (!(cl = m->getClass("transaction_lockmode")))
    append(s, "'transaction_lockmode' ", not_exit_msg);
  else if (!OqlCtbTransactionLockMode_Class->compare(cl))
    append(s, "'OqlCtbTransactionLockMode' ", differ_msg);
  if (!(cl = m->getClass("recovery_mode")))
    append(s, "'recovery_mode' ", not_exit_msg);
  else if (!OqlCtbRecoveryMode_Class->compare(cl))
    append(s, "'OqlCtbRecoveryMode' ", differ_msg);
  if (!(cl = m->getClass("tostring_flags")))
    append(s, "'tostring_flags' ", not_exit_msg);
  else if (!OqlCtbToStringFlags_Class->compare(cl))
    append(s, "'OqlCtbToStringFlags' ", differ_msg);
  if (!(cl = m->getClass("MapType")))
    append(s, "'MapType' ", not_exit_msg);
  else if (!OqlCtbMapType_Class->compare(cl))
    append(s, "'OqlCtbMapType' ", differ_msg);
  if (!(cl = m->getClass("DatType")))
    append(s, "'DatType' ", not_exit_msg);
  else if (!OqlCtbDatType_Class->compare(cl))
    append(s, "'OqlCtbDatType' ", differ_msg);
  if (!(cl = m->getClass("datafile")))
    append(s, "'datafile' ", not_exit_msg);
  else if (!OqlCtbDatafile_Class->compare(cl))
    append(s, "'OqlCtbDatafile' ", differ_msg);
  if (!(cl = m->getClass("dataspace")))
    append(s, "'dataspace' ", not_exit_msg);
  else if (!OqlCtbDataspace_Class->compare(cl))
    append(s, "'OqlCtbDataspace' ", differ_msg);
  if (!(cl = m->getClass("eyedb")))
    append(s, "'eyedb' ", not_exit_msg);
  else if (!OqlCtbEyedb_Class->compare(cl))
    append(s, "'OqlCtbEyedb' ", differ_msg);
  if (!(cl = m->getClass("connection")))
    append(s, "'connection' ", not_exit_msg);
  else if (!OqlCtbConnection_Class->compare(cl))
    append(s, "'OqlCtbConnection' ", differ_msg);
  if (!(cl = m->getClass("database")))
    append(s, "'database' ", not_exit_msg);
  else if (!OqlCtbDatabase_Class->compare(cl))
    append(s, "'OqlCtbDatabase' ", differ_msg);
  if (!(cl = m->getClass("math")))
    append(s, "'math' ", not_exit_msg);
  else if (!OqlCtbMath_Class->compare(cl))
    append(s, "'OqlCtbMath' ", differ_msg);
  if (!(cl = m->getClass("oql")))
    append(s, "'oql' ", not_exit_msg);
  else if (!oql_Class->compare(cl))
    append(s, "'oql' ", differ_msg);
  if (s) {eyedb::Status status = eyedb::Exception::make(s); free(s); return status;}
  return eyedb::Success;
}

eyedb::Bool oqlctb_set_oid_check(eyedb::Bool _oid_check)
{
  eyedb::Bool old = oid_check;
  oid_check = _oid_check;
  return old;
}

eyedb::Bool oqlctb_get_oid_check()
{
  return oid_check;
}

}
